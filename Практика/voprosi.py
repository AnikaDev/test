'''Светлана составляет коды из букв слова РОСОМАХА. Код должен состоять из 8 букв, и каждая буква в нём должна
встречаться столько же раз, сколько в заданном слове. Кроме того, в коде не должны стоять рядом две гласные и две
согласные буквы. Сколько кодов может составить Светлана?'''
# from itertools import *
# alf = 'rocmxa'
# af = 'ao'
# bf = 'rcmx'
# k = 0
# for x in product(alf, repeat=8):
#     a = ''.join(x)
#     q = 1
#     for g in range(len(a) - 1):
#         if (a[g] in af and a[g + 1] in af) or (a[g] in bf and a[g + 1] in bf):
#             q = 0
#     if a.count('r') == 1 and a.count('o') == 2 and a.count('c') == 1 and a.count('m') == 1 and a.count('x') == 1 \
#            and a.count('a') == 2 and q == 1:
#         k += 1
# print(k)


# alf = 'росмха'
# af = 'оа'
# bf = 'рсмх'
# k = 0
# for i in alf:
#     for j in alf:
#         for a in alf:
#             for b in alf:
#                 for c in alf:
#                     for t in alf:
#                         for m in alf:
#                             for d in alf:
#                                 s = i + j + a + b + c + t + m + d
#                                 q = True
#                                 n = len(s)
#                                 for z in range(n - 1):
#                                     if (s[z] in af and s[z + 1] in af) or (s[z] in bf and s[z + 1] in bf):
#                                         q = False
#                                         break
#                                 if s.count('р') == 1 and s.count('о') == 2 and s.count('с') == 1 and s.count('м') == 1\
#                                         and s.count('а') == 2 and s.count('х') == 1 and q == True:
#                                     k += 1
# print(k)

# import itertools
# alf = 'росмха'
# r1 = itertools.product(alf, repeat=8)
# r2 = []
# af = 'оа'
# bf = 'рсмх'
# k = 0
# for i in r1:
#     r2.append(list(i))
# for s in r2:
#     q = True
#     for z in range(7):
#         if (s[z] in af and s[z + 1] in af) or (s[z] in bf and s[z + 1] in bf):
#             q = False
#             break
#     if s.count('р') == 1 and s.count('о') == 2 and s.count('с') == 1 and s.count('м') == 1 \
#             and s.count('а') == 2 and s.count('х') == 1 and q == True:
#         k += 1
# print(k)

'''Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000. Назовём тройкой три идущих 
подряд элемента последовательности. Определите количество троек чисел таких, которые могут являться сторонами 
прямоугольного треугольника. В ответе запишите два числа: сначала количество найденных троек, а затем— максимальную 
сумму элементов таких троек. Если таких троек не найдётся— следует вывести 0 0.'''
# f = open('17_30.txt', 'r', encoding='utf-8')
# a = []
# for i in f:
#     a.append(int(i))
# f.close()
# n = len(a)
# k = 0
# m = 0
# for i in range(n - 2):
#     x = max(max(a[i], a[i + 1]), a[i + 2]) # почему max(a[i])
#     y = min(min(a[i], a[i + 1]), a[i + 2])
#     z = a[i] + a[i + 1] + a[i + 2] - y - x
#     if y**2 + z**2 == x**2:
#         k += 1
#         m = max(m, x + y + z)
#     if k == 0:
#         print('0 0')
#     else:
#         print(k, m)


'''Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу. Например, у числа
 6 есть два нетривиальных делителя: 2 и 3. Найдите все натуральные числа, принадлежащие отрезку [289123456;389123456] 
 и имеющие ровно три нетривиальных делителя. Для каждого найденного числа запишите в ответе его наибольший нетривиальный
делитель. Ответы расположите в порядке возрастания.'''

# from math import *
# def F(x):
#     a = []
#     k = 0
#     g = int(sqrt(x)) + 1
#     for i in range(2, g):
#         if x % i == 0:
#             a.append(i)
#             if x // i != i:
#                 a.append(x // i)
#                 k += 1
#             k += 1
#             if k > 3:
#                 return a
#     return a
#
#
# for i in range(289123456, 389123457):
#     d = F(i)
#     if len(d) == 3:
#         print(i, max(d))


# from math import *
# def Delit(n):
#     a = []
#     k = 0
#     q = int(sqrt(n))
#     for i in range(2, q):
#         if n % i == 0:
#             a.append(i)
#             a.append(n // i)
#             k += 1
#             if k > 3:
#                 return a
#     if n % q == 0:
#         a.append(q)
#     return a
#
#
# for j in range(294499921, 294499924):
#     d = Delit(j)
#     if len(d) == 3:
#         d.sort()
#         print(j, d[-1])


'''Найдите все натуральные числа N, принадлежащие отрезку [200000000;400000000], которые можно представить в виде 
N=2^m·3^n, где m— чётное число, n— нечётное число. В ответе запишите все найденные числа в порядке возрастания.'''

# def Stepen(x):
#     m = 0
#     n = 0
#     while x % 3 == 0:
#         n += 1
#         x //= 3
#     if n % 2 == 0:
#         return False
#     while x % 2 == 0:
#         m += 1
#         x //= 2
#     if x != 1 or m % 2 == 1:   # почему тут or
#         return False
#     return True
#
# for i in range(200000000, 400000001):
#     if Stepen(i):
#         print(i)


'''Пусть M(N)— сумма двух наибольших различных натуральных делителей натурального числа N, не считая самого числа. 
Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
Найдите 5 наименьших натуральных чисел, превышающих 10000000, для которых 0<M(N)<10000. В ответе запишите найденные 
значения M(N) в порядке возрастания соответствующих им чиселN.'''
# def Delit(n):
#     a = []
#     for i in range(n // 2 + 1, 1, -1):
#         if n % i == 0:
#             a.append(i)
#             if len(a) == 2:
#                 return a[-1] + a[-2]   # почему это решение не работает
#     return 0
#
#
# k = 0
# i = 10000001
# while k < 5:
#     d = Delit(i)
#     if 0 < d < 10000:
#         print(d)
#         k += 1
#     i += 1


# def Find_m(x):
#     m = 0
#     k = 0
#     for i in range(x // 2, 0, -1):
#         if x % i == 0:
#             k += 1
#             m += i
#             if k == 2:
#                 return m
#     return 0
#
#
# g = 10000001
# k = 0
# while k < 5:
#     m = Find_m(g)
#     if 0 < m < 10000:
#         k += 1
#         print(m)
#     g += 1

'''(№ 4410) (Л. Шастин) Среди чисел, больших 520000, найти такие, для которых сумма всех нетривиальных делителей
 (не считая единицы и самого числа) образует число-палиндром (например, число 1221: если его «перевернуть», получается 
 то же самое число). Вывести первые пять чисел, удовлетворяющих вышеописанному условию, справа от каждого числа вывести 
 его максимальный нетривиальный делитель.'''
# def P(x):
#     m = 0
#     for i in range(2, 1 + x // 2):
#         if x % i == 0:
#             m += i
#     m = str(m)
#     if m == m[::-1]:  # почему не работает
#         return m
#     return 0
#
#
# k = 0
# i = 520001
# while k < 5:
#     d = P(i)
#     if d:
#         print(i)
#         k += 1
#     i += 1


# def Palendrom(x):
#     k = 0
#     s = str(x)
#     n = len(s)
#     if s[0:] == s[::-1]:
#         return True
#     return False
#
#
# def Cheak(x):
#     s = 0
#     k = 0
#     for i in range(2, x - 1):
#         if x % i == 0:
#             s += i
#             k = i
#     if Palendrom(s):
#         return k
#     else:
#         return 0
#
#
# g = 520211
# h = 0
# while h < 5:
#     l = Cheak(g)
#     if l != 0:
#         h += 1
#         print(g, l)
#     g += 1


'''Пусть M(к) = 950 000 000 + к, где к-натуралльное число. Найдите пять наименьших значений к, при которых M(к) имеет
нечетное количество различных четных делителей. В ответе запишите найденные значения к в порядке возрастания.'''
# def Delit(x):
#     q = int(x**0.5) + 1
#     a = []
#     for i in range(1, q):
#         if x % i == 0:
#             if i % 2 == 0:
#                 a.append(i)
#             if x // i != i and (x // i) % 2 == 0:
#                 a.append(x // i)
#     return a
#
#
# i = 950000000
# k = 0
# k1 = 1
# while k < 5:
#     d = Delit(i + k1)
#     n = len(d)
#     if n % 2 == 1:
#         print(k1)
#         k += 1
#     k1 += 1

'''Дана программа для Редактора:
НАЧАЛО
ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>0)
ЕСЛИ нашлось (>1)
ТО заменить (>1, 22>) # 4
КОНЕЦ ЕСЛИ
ЕСЛИ нашлось (>2) #2
ТО заменить (>2, 2>)
КОНЕЦ ЕСЛИ
ЕСЛИ нашлось (>0)
ТО заменить (>0, 1>) #1
КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
На вход приведённой выше программе поступает строка, начинающаяся с символа «>», а затем содержащая 39 цифр «0», n цифр
«1» и 39 цифр «2», расположенных в произвольном порядке.
Определите наименьшее значение n, при котором сумма числовых значений цифр строки, получившейся в результате выполнения
программы, является простым числом.'''
# def Prost(x):
#     for i in range(2, x):
#         if x % i == 0:
#             return False
#     return True
#
#
# for n in range(0, 1000):
#     s = 39 * 1 + n * 4 + 39 * 2
#     if Prost(s):
#         print(n)
#         break


'''НАЧАЛО
ПОКА НЕ нашлось (00)
заменить (01, 210) = 210
заменить (02, 3101) = 31210
заменить (03, 2012) = 22102 = 22131210
КОНЕЦ ПОКА
КОНЕЦ
Известно, что исходная строка начиналась с нуля и заканчивалась нулём, а между ними содержала только единицы, двойки и 
тройки. После выполнения данной программы получилась строка, содержащая 61 единицу, 50 двоек и 18 троек. Сколько цифр
было в исходной строке?'''
# for k1 in range(0, 51):
#     for k2 in range(0, 19):
#         for k3 in range(0, 19):
#             m1 = k1 + k2 * 2 + k3 * 3
#             m2 = k1 + k2 + k3 * 3
#             m3 = k2 + k3
#             if m1 == 61 and m2 == 50 and m3 == 18:
#                 print(k1 + k2 + k3 + 2)
#                 break



'''Дана программа для редактора:
НАЧАЛО
ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)
заменить (01, 2302) = 2310
заменить (02, 10) = 10
заменить (03, 201) = 22310
КОНЕЦ ПОКА
КОНЕЦ
Известно, что исходная строка начиналась с нуля, а далее содержала только единицы, двойки и тройки. После выполнения 
данной программы получилась строка, содержащая 40 единиц, 10 двоек и 8 троек. Сколько единиц было в исходной строке?
'''
# for k1 in range(9):
#     for k2 in range(41):
#         for k3 in range(6):
#             m1 = k1 + k3 + k2
#             m2 = k1 + k3 * 2
#             m3 = k1 + k3
#             if m1 == 40 and m2 == 10 and m3 == 8:
#                 print(k1)


'''Дана программа для Редактора:
НАЧАЛО
ПОКА нашлось (11)
ЕСЛИ нашлось (112)
ТО заменить (112, 6)
ИНАЧЕ заменить (11, 3)
КОНЕЦ ПОКА
КОНЕЦ
Исходная строка содержит десять единиц и четыре двойки, других цифр нет, точный порядок расположения единиц и двоек
неизвестен. Какую наибольшую сумму цифр может иметь строка, которая получится после выполнения программы?'''

# s = '11211211211211'
# print(6*4 + 3)


'''Дана программа для Редактора:
НАЧАЛО
ПОКА нашлось (12)
заменить (12, 4)
КОНЕЦ ПОКА
КОНЕЦ
Исходная строка содержит десять единиц и некоторое количество двоек, других цифр нет, точный порядок расположения единиц
и двоек неизвестен. После выполнения программы получилась строка с суммой цифр 25. Какое наименьшее количество двоек 
могло быть в исходной строке?'''
# for i in range(11):
#     s = 4*i + 10 - i
#     if s == 25:
#         print(i)
#         break


'''Дана программа для Редактора:
НАЧАЛО
ПОКА нашлось (11)
ЕСЛИ нашлось (112)
ТО заменить (112, 6)
ИНАЧЕ заменить (11, 3)
КОНЕЦ ПОКА
КОНЕЦ
Исходная строка содержит десять единиц и три двойки, других цифр нет, точный порядок расположения единиц и двоек 
неизвестен. Какую наибольшую сумму цифр может иметь строка, которая получится после выполнения программы?'''
# s = '1121121121111'
# print(6*3 + 3*2)


'''Дана программа для редактора:

 

НАЧАЛО
ПОКА нашлось (111) ИЛИ нашлось (222)
заменить (111, 22)
заменить (222, 1)
КОНЕЦ ПОКА
КОНЕЦ
Известно, что исходная строка содержала больше 200 единиц и не содержала других цифр, а после выполнения программы
получилась строка, содержащая только двойки. Какое наименьшее количество единиц могло быть в исходной строке?'''
# for i in range(201, 1000):
#     s = '1' * i
#     while '111' in s or '222' in s:
#         s = s.replace('111', '22', 1)
#         s = s.replace('222', '1', 1)
#     if not('1' in s):
#         print(i)
#         break

'''(№ 5643) (П. Финкель) Текстовый файл 24-228.txt состоит не более чем из 106 символов и содержит буквы английского 
алфавита и цифры. Определите максимальное число в этом файле, ограниченное двумя парами символов SS и удовлетворяющее
маске «12????77??9», где символ ? обозначает любую цифру. Пример такого числа: «12123477129». Найдите сумму нечётных 
цифр и произведение чётных цифр найденного числа, запишите в качестве ответа сумму этих двух чисел.'''
# a1 = '0123456789'
# f = open('rt.txt', 'r', encoding='utf-8')
# s = f.readline()
# f.close()
# n = len(s)
# i = 0
# max1 = 0
# k = 0
# while i < n - 12:
#     if s[i] == "S":
#         if s[i + 1] == '1' and s[i + 2] == '2' and s[i + 3] in a1 and s[i + 4] in a1 and s[i + 5] in a1 and s[i + 6] in a1\
#             and s[i + 7] == '7' and s[i + 8] == '7' and s[i + 9] in a1 and s[i + 10] in a1 and s[i + 11] == '9' and s[i + 12] == 'S':
#             k = s[i + 1] + s[i + 2] + s[i + 3] + s[i + 4] + s[i + 5] + s[i + 6] + s[i + 7] + s[i + 8] + s[i + 9] + s[i + 10] + s[i + 11]
#             i += 12
#         else:
#             max1 = max(int(k), max1)
#             i += 1
# print(max1)



'''(№ 5402) (А. Богданов) При проведении эксперимента заряженные частицы попадают на чувствительный экран, 
представляющий из себя матрицу пикселей размером 10000 на 10000 точек. При попадании очередной частицы на экран в файл 
записываются координаты чувствительного элемента: номер строки (целое число от 1 до 10000) и номер позиции в строке
(целое число от 1 до 10000) и её заряд (+/-). Положительно заряженная частица включает пиксель, а отрицательно 
заряженная выключает. Положительная частица не влияет на включенный пиксель, как и отрицательно заряженная на 
выключенный. Определите на момент завершения эксперимента номер строки, в которой находится наибольшая непрерывная 
цепочка включенных пикселей. 
Входные данные представлены в файле 26-92.txt следующим образом. В первой строке записано количество строк с данными 
N (1 ≤ N ≤ 1000000). В каждой из следующих N строк записаны два натуральных числа, не превышающих 10000 – координаты 
сработавшего чувствительного элемента (сначала строка, затем позиция пикселя в этой строке), а затем – знак «+» или «–»,
отделенный от чисел пробелом.
Запишите в ответе два числа: сначала длину наибольшей непрерывной цепочки включенных пикселей одной строки, 
затем – номер строки, в которой находятся эта цепочка. Если таких строк несколько, укажите номер последней из подходящих
строк.
Пример входного файла::
8
2 5 +
2 6 +
1 2 +
2 7 +
1 3 -
2 6 +
2 4 +
2 7 -
При таких исходных данных задачи на момент завершения эксперимента в строке 1 включен только пиксель в позиции 2, а в 
строке 2 – три пикселя подряд в позициях 4, 5 и 6. Самая Ответ: 2 3.'''
# f = open('rt.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# row = []
# place = []
# for line in f:
#     t = line.split()
#     t = list(map(int, t))


# min1 = 10000
# for n in range(1, 100):
#     b = bin(n)[2:]
#     if b.count('1') % 2 == 0:
#         s = b + '0'
#         c = '11' + s[2:]
#     else:
#         s = b + '1'
#         c = '11' + s[2:]
#     R = int(c, 2)
#     if R > 25 and R < min1:
#         min1 = n
# print(min1)


# from turtle import *
# window = Screen()
# speed(400)
# left(90)
# k = 20
# for i in range(2):
#     forward(10*k)
#     right(90)
#     forward(20 * k)
#     right(90)
# up()
# forward(3*k)
# right(90)
# forward(7*k)
# left(90)
# down()
# for i in range(2):
#     forward(70*k)
#     right(90)
#     forward(90 * k)
#     right(90)
# up()
# for x in range(-5, 16):
#     for y in range(-5, 15):
#         goto(x*k, y*k)
#         dot(2)
# window.exitonclick()


'''В информационной системе хранятся изображения размером 1024×768 пикселей. Методы сжатия изображений не используются.
Каждое изображение дополняется служебной информацией, которая занимает 640 Кбайт. Для хранения 2048 изображений 
потребовалось 2 Гбайт. Сколько цветов использовано в палитре каждого изображения?'''
#  (R * I бит + 640 kb) * 2048 <= 2 гигабайта
# print(2 * 2**20 / 2048)
# print(1024 - 640)
# print(384 * 2**13 / 1024 / 768)





















