'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл
каждого пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 1000). В следующих N строках
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив,
затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы
максимально возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и
40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''
# f = open('26_1.txt', 'r', encoding='utf-8')
# d = f.readline()
# d = d.split()
# s = int(d[0])
# n = int(d[1])
# a = []
# for line in f:
#     a.append(int(line))
# a.sort()
# k = 0
# m = 0
# i = 0
# while m + a[i] <= s:
#     k += 1
#     m += a[i]
#     i += 1
# # print(k, a[i - 1], s - m)
# max1 = a[i - 1]
# while i < n and m + a[i] - max1 <= s:
#     m = m - max1 + a[i]
#     max1 = a[i]
#     i += 1
# print(k, max1)



# s = input().split()
# n = int(s[0])
# m = int(s[1])
# gr = [0] * n * m
# for i in range(n):
#     s = input().split()
#     s = list(map(int, s))
#     for j in range(m):
#         gr[i * m + j] = s[j]
# k = int(input())
# mk = input().split()
# mk = list(map(int, mk))
# count = 0
# l = len(gr)
# gr.sort(reverse=True)
# mk.sort(reverse=True)
# for i in mk:
#     if i <= gr[0]:
#         count += 1
#         gr.pop(0)
# print(count)

#Сортировка точек по расстоянию от начала координат
# n = int(input())
# points = []
# for i in range(n):
#     p = input().split(' ')
#     p = list(map(int, p))
#     points.append(p)
# print(points)
# def Distant(p):
#     return (p[0]**2 + p[1]**2)**0.5
# points.sort(key=lambda x:Distant(x))
#
#
# print(points)

'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает 
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого
 пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, 
не превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 4000). В следующих N 
строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в 
отдельной строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем
 максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы
максимально возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50
 '''
# считать данные из файла
# f = open('26_2.txt', 'r', encoding='utf-8')
# line = f.readline().split()
# s = int(line[0])    # размер свободного места на диске
# n = int(line[1])    # количество пользователей-файлов
# a = []   # список файлов с их размерами
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()   # сортировка по возрастанию
# k = 0  # количество вмещенных файлов
# i = 0  # индекс файла
# c = 0  # суммарная размерность вмещенных файлов
# while i < n and c + a[i] <= s:
#     c += a[i]
#     i += 1
#     k += 1
# print(k)
# print(a)
# m = a[i - 1]   # последний максимальный вмещенный элемент
# print(m, m + s - c)  # глазами, второе число - максимально допустимое значение в файле
# while i < n and c - m + a[i] <= s:  # алгоритм программированием
#     c = c - m + a[i]
#     m = a[i]
#     i += 1
# print(m)


'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает 
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 5000). В следующих N строках
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной 
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''

# f = open('26_3.txt', 'r', encoding='utf-8')
# b = f.readline().split()
# s = int(b[0])
# n = int(b[1])
# a = []
# for i in f:
#     a.append(int(i))
# f.close()
# a.sort()
# k = 0
# i = 0
# r = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     i += 1
#     k += 1
# print(k)
# h = a[i - 1]
# print(h, h + s - r)  # 17



'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 6000). В следующих N строках
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной 
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем 
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''
# f = open('26_4.txt', 'r', encoding='utf-8')
# h = f.readline().split()
# s = int(h[0])
# n = int(h[1])
# a = []
# for i in f:
#     a.append(int(i))
# f.close()
# a.sort()
# k = 0
# i = 0
# r = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i - 1]
# print(m, m + s - r)


'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает 
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не 
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 3000). В следующих N строках
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем 
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''
# f = open('26_5.txt', 'r', encoding='utf-8')
# b = f.readline().split()
# s = int(b[0])
# n = int(b[1])
# a = []
# for i in f:
#     a.append(int(i))
# f.close()
# a.sort()
# k = 0
# i = 0
# r = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i - 1]
# print(m, m + s - r)

'''Продавец предоставляет покупателю, делающему большую закупку, скидку по следующим правилам:
— на каждый второй товар стоимостью больше 50 рублей предоставляется скидка 25%;
— общая стоимость покупки со скидкой округляется вверх до целого числа рублей;
— порядок товаров в списке определяет продавец и делает это так, чтобы общая сумма скидки была наименьшей.
По известной стоимости каждого товара в покупке необходимо определить общую стоимость покупки с учётом скидки и 
стоимость самого дорогого товара, на который будет предоставлена скидка.
Входные данные.
Задание 26
Первая строка входного файла содержит число N— общее количество купленных товаров. Каждая из следующих N строк
 содержит одно целое число— стоимость товара в рублях.
В ответе запишите два целых числа: сначала общую стоимость покупки с учётом скидки, затем стоимость самого дорогого
товара, на который будет предоставлена скидка.
Пример входного файла:
6
125
50
490
215
144
320
В данном случае товар стоимостью 50 не участвует в определении скидки, остальные товары продавцу выгодно расположить в 
таком порядке цен: 490, 125, 215, 144, 320. Тогда скидка предоставляется на товары стоимостью 125 и 144. Стоимость этих
двух товаров со скидкой составит 201,75 руб., после округления— 202 руб. Общая стоимость покупки составит:
50 + 490 + 215 + 320 + 202 = 1277 руб.
Самый дорогой товар, на который будет получена скидка, стоит 144 руб. В ответе нужно записать числа 1277 и 144.'''
# from math import ceil
# f = open('26_16.txt', 'r', encoding='utf-8')
# n = int(f.readline())  # количество товаров
# a = []  # список для товаров участвующих в акции
# s = 0  # сумма товаров
# for i in f:
#     if int(i) <= 50:
#         s += int(i)  # товары меньше 50 вообще не участвуют в скидке
#     else:
#         a.append(int(i))
# f.close()
# a.sort()  # сортировка по возрастанию
# n = len(a)  # количество товаров в акции
# min_a = a[0:n//2]  # товары на которые распространяется скидка
# max_a = a[n//2:]   # товары на которые не распространяется скидка
# s += sum(max_a)  # общая сумма товаров без скидок
# for i in min_a:
#     s += i * 0.75  # скидка 25%
# s = ceil(s)  # округление в большую сторону
# print(s, max(min_a))  # стоимость покупки, максимальный товар из товаров со скидкой

'''Для перевозки партии грузов различной массы выделен грузовик, но его грузоподъёмность ограничена, поэтому перевезти 
сразу все грузы не удастся. Грузы массой от 200 до 210 кг грузят в первую очередь, гарантируется, что все такие грузы 
поместятся. На оставшееся после этого место стараются взять как можно больше грузов. Если это можно сделать несколькими 
способами, выбирают тот способ, при котором самый большой из выбранных грузов имеет наибольшую массу. Если и при этом 
условии возможно несколько вариантов, выбирается тот, при котором наибольшую массу имеет второй по величине груз, и т.д.
Известны количество грузов, масса каждого из них и грузоподъёмность грузовика. Необходимо определить количество и общую
массу грузов, которые будут вывезены при погрузке по вышеописанным правилам.
Входные данные.
Задание 26
Первая строка входного файла содержит два целых числа: N— общее количество грузов и M— грузоподъёмность грузовика в кг.
Каждая из следующих N строк содержит одно целое число— массу груза в кг.
В ответе запишите два целых числа: сначала максимально возможное количество грузов, затем их общую массу.
Пример входного файла:
6 605
140
205
120
160
100
340
В данном случае сначала нужно взять груз массой 205 кг. После этого можно вывезти ещё максимум 3 груза. Это можно
сделать тремя способами: 140 + 120 + 100, 140 + 160 + 100, 120 + 160 + 100. Выбираем способ, при котором вывозится груз
наибольшей возможной массы. Таких способов два: 140 + 160 + 100 и 120 + 160 + 100. Из этих способов выбираем тот, при 
котором больше масса второго по величине груза, то есть 140 + 160 + 100. Всего получается 4 груза общей массой 605 кг.
В ответе надо записать числа 4 и 605.'''
# f = open('26_18.txt', 'r', encoding='utf-8')
# b = f.readline().split()
# n = int(b[0])  # общее количество грузов
# m = int(b[1])  # грузоподъёмность грузовика в кг
# a = []  # список грузов, кроме массы 200 - 210
# s = 0  # масса грузов которую мы поместили
# k = 0  # количество помещенных грузов
# for i in f:
#     if 200 <= int(i) <= 210:
#         k += 1
#         s += int(i)
#     else:
#         a.append(int(i))
# f.close()
# a.sort()  # сортируем по возрастанию
# n = len(a)  # список грузов которые можно добавить(не 200-210)
# i = 0  # индекс груза
# while i < n and s + a[i] <= m:
#     s += a[i]
#     i += 1
#     k += 1
# # далее без учета 200-210
# gr_d = a[:i]  # грузы которые мы уже добавили
# gr_n = a[i:]  # грузы которые мы не добавили
# k_d = len(gr_d)  # добавленные грузы(количество)
# k_n = len(gr_n)  # недобавленные грузы(количество)
# gr_d.sort(reverse=True)  # сортировка по убыванию
# gr_n.sort(reverse=True)  # сортировка по убыванию
# for i in range(k_d):
#     for j in range(k_n):
#         if s - gr_d[i] + gr_n[j] <= m:
#             s = s - gr_d[i] + gr_n[j]  # изменяем сумму
#             gr_d[i], gr_n[j] = gr_n[j], gr_d[i]  # меняем элементы местами
#             gr_n.sort(reverse=True)  # сортировка по убыванию, так как нарушается порядок после замены элементов
#             break
#  170 160 150 140
#  265 260 255 250
# print(k, s)

'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не 
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 4000). В следующих N строках
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной
 строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40,
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''
# f = open('26_6.txt', 'r', encoding='utf-8')
# d = f.readline().split()
# s = int(d[0])
# n = int(d[1])
# a = []
# for i in f:
#     a.append(int(i))
# f.close()
# a.sort()
# i = 0
# k = 0
# r = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i - 1]
# while i < n and r - m + a[i] <= s:
#     r = r - m + a[i]
#     m = a[i]
#     i += 1
# print(m)

'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает 
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 3000). В следующих N 
строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в 
отдельной строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем 
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40,
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''
# f = open('26_7.txt', 'r', encoding='utf-8')
# d = f.readline().split()
# s = int(d[0])
# n = int(d[1])
# a = []
# for i in f:
#     a.append(int(i))
# f.close()
# a.sort()
# k = 0
# i = 0
# r = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i - 1]
# while i < n and r - m + a[i] <= s:
#     r = r - m + a[i]
#     m = a[i]
#     i += 1
# print(m)

'''Продавец предоставляет покупателю, делающему большую закупку, скидку по следующим правилам:
— на каждый второй товар стоимостью больше 100 рублей предоставляется скидка 30%;
— общая стоимость покупки со скидкой округляется вверх до целого числа рублей;
— порядок товаров в списке определяет продавец и делает это так, чтобы общая сумма скидки была наименьшей.
По известной стоимости каждого товара в покупке необходимо определить общую стоимость покупки с учётом скидки и 
стоимость самого дорогого товара, на который будет предоставлена скидка.
Входные данные.
Задание 26
Первая строка входного файла содержит число N— общее количество купленных товаров. Каждая из следующих N строк содержит
одно целое число— стоимость товара в рублях.
В ответе запишите два целых числа: сначала общую стоимость покупки с учётом скидки, затем стоимость самого дорогого 
товара, на который будет предоставлена скидка.
Пример входного файла:
6
125
100
490
215
144
320
В данном случае товар стоимостью 100 не участвует в определении скидки, остальные товары продавцу выгодно расположить в 
таком порядке цен: 490, 125, 215, 144, 320. Тогда скидка предоставляется на товары стоимостью 125 и 144. Стоимость этих
двух товаров со скидкой составит 188,3 руб., после округления— 189 руб. Общая стоимость покупки составит:
100 + 490 + 215 + 320 + 189 = 1314 руб.
Самый дорогой товар, на который будет получена скидка, стоит 144 руб. В ответе нужно записать числа 1314 и 144.'''
# from math import ceil
# f = open('26_17.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# s = 0
# for i in f:
#     if int(i) <= 100:
#         s += int(i)
#     else:
#         a.append(int(i))
# f.close()
# a.sort()
# n = len(a)
# min_a = a[:n//2]
# max_a = a[n//2:]
# s += sum(max_a)
# for i in min_a:
#     s += i * 0.7
# s = ceil(s)
# print(s, max(min_a))

'''Для перевозки партии грузов различной массы выделен грузовик, но его грузоподъёмность ограничена, поэтому перевезти 
сразу все грузы не удастся. Грузы массой от 210 до 220кг грузят в первую очередь, гарантируется, что все такие грузы
поместятся. На оставшееся после этого место стараются взять как можно больше грузов. Если это можно сделать несколькими 
способами, выбирают тот способ, при котором самый большой из выбранных грузов имеет наибольшую массу. Если и при этом 
условии возможно несколько вариантов, выбирается тот, при котором наибольшую массу имеет второй по величине груз, и т.д.
Известны количество грузов, масса каждого из них и грузоподъёмность грузовика. Необходимо определить количество и общую
массу грузов, которые будут вывезены при погрузке по вышеописанным правилам.
Входные данные.
Задание 26
Первая строка входного файла содержит два целых числа: N— общее количество грузов и M— грузоподъёмность грузовика в кг. 
Каждая из следующих N строк содержит одно целое число— массу груза в кг.
В ответе запишите два целых числа: сначала максимально возможное количество грузов, затем их общую массу.
Пример входного файла:
6 615
140
215
120
160
100
340
В данном случае сначала нужно взять груз массой 215 кг. После этого можно вывезти ещё максимум 3 груза. Это можно 
сделать тремя способами: 140 + 120 + 100, 140 + 160 + 100, 120 + 160 + 100. Выбираем способ, при котором вывозится груз 
наибольшей возможной массы. Таких способов два: 140 + 160 + 100 и 120 + 160 + 100. Из этих способов выбираем тот, при 
котором больше масса второго по величине груза, то есть 140 + 160 + 100. Всего получается 4 груза общей массой 615 кг. 
В ответе надо записать числа 4 и 615.'''
# f = open('26_19.txt', 'r', encoding='utf-8')
# d = f.readline().split()
# n = int(d[0])
# m = int(d[1])
# a = []
# s = 0
# k = 0
# for i in f:
#     if 210 <= int(i) <= 220:
#         k += 1
#         s += int(i)
#     else:
#         a.append(int(i))
# f.close()
# a.sort()
# n = len(a)
# i = 0
# while i < n and s + a[i] <= m:
#     s += a[i]
#     i += 1
#     k += 1
# gr_d = a[:i]
# gr_n = a[i:]
# k_d = len(gr_d)
# k_n = len(gr_n)
# gr_d.sort(reverse=True)
# gr_n.sort(reverse=True)
# for i in range(k_d):
#     for j in range(k_n):
#         if s - gr_d[i] + gr_n[j] <= m:
#             s = s - gr_d[i] + gr_n[j]
#             gr_d[i], gr_n[j] = gr_n[j], gr_d[i]
#             gr_n.sort(reverse=True)
#             break
# print(k, s)


'''Предприятие производит оптовую закупку некоторых изделий A и B, на которую выделена определённая сумма денег. У
поставщика есть в наличии партии этих изделий различных модификаций по различной цене. На выделенные деньги необходимо
приобрести как можно больше изделий A независимо от модификации. Если у поставщика закончатся изделия A, то на 
оставшиеся деньги необходимо приобрести как можно больше изделий B. Известны выделенная для закупки сумма, а также
количество и цена различных модификаций данных изделий у поставщика. Необходимо определить, сколько будет закуплено 
изделий B и какая сумма останется неиспользованной.
Входные данные.
Задание 26
Первая строка входного файла содержит два целых числа: N— общее количество партий изделий у поставщика и M— сумма
выделенных на закупку денег (в рублях). Каждая из следующих N строк описывает одну партию и содержит два целых числа
(цена одного изделия в рублях и количество изделий в партии) и один символ (латинская буква A или B), определяющий тип
изделия. Все данные в строках входного файла отделены одним пробелом.
В ответе запишите два целых числа: сначала количество закупленных изделий типа B, затем оставшуюся неиспользованной 
сумму денег.
Пример входного файла:
4 1000
30 8 A
50 12 B
40 14 A
30 60 B
В данном случае сначала нужно купить изделия A: 8 изделий по 30 рублей и 14 изделий по 40 рублей. На это будет потрачено
800 рублей. На оставшиеся 200 рублей можно купить 6 изделий B по 30 рублей. Таким образом, всего будет куплено 6 изделий
 B и останется 20 рублей. В ответе надо записать числа 6 и 20.'''
# f = open('26_20.txt', 'r', encoding='utf-8')
# d = f.readline().split()
# n = int(d[0])  #общее количество партий изделий у поставщика
# m = int(d[1])  #сумма выделенных на закупку денег (в рублях)
# a = []  # изделия типа А
# b = []  # изделия типа В
# for i in f:
#     t = i.split()  # превращаем в список
#     if t[2] == 'A':  # проверка типа изделия
#         a.append([int(t[0]), int(t[1])])  # t[0]-цена  t[1]-кол-во
#     else:
#         b.append([int(t[0]), int(t[1])])
# f.close()
# def Sort_price(t):
#     return t[0]  # ключ для сортировки-цена товара
#
# 
# a.sort(key=lambda t:Sort_price(t))
# b.sort(key=lambda t:Sort_price(t))
# s = 0  # сумма потраченных средств
# n1 = len(a)  # количество модификаций типа А
# n2 = len(b)  # количество модификаций типа B
# i = 0  # индекс модификаций
# while i < n1 and s + a[i][0] <= m:
#     j = 0  # индекс изделия данной модификации
#     while j < a[i][1] and s + a[i][0] <= m:
#         s += a[i][0]
#         j += 1
#     i += 1
# if s < m:
#     k = 0  # кол-во взятых изделий В
#     i = 0
#     while i < n2 and s + b[i][0] <= m:
#         j = 0
#         while j < b[i][1] and s + b[i][0] <= m:
#             s += b[i][0]
#             k += 1
#             j += 1
#         i += 1
#     print(k, m - s)


'''В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны.
Необходимо определить, сколько в наборе таких пар чисел, что числа в паре имеют одинаковую чётность, а их сумма тоже 
присутствует в файле, и чему равна наибольшая из сумм таких пар.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество чисел в наборе. Каждая из следующих N строк
содержит одно число.
В ответе запишите два целых числа: сначала количество пар, затем наибольшую сумму.
Пример входного файла:
6
3
8
14
11
22
17
В данном случае есть две подходящие пары: 3 и 11 (сумма 14), 8 и 14 (сумма 22). В ответе надо записать числа 2 и 22.'''
# рекурсивеая функция поиска sr арифом в сорт списке a
# def Proverka(a, left, right, sr):
#     if left > right - 1:  # левая и правая граница совпали
#         if a[left] != sr:
#             return False
#         return True
#     m = (left + right) // 2  # середина индекса между левой и правой границей
#     if a[m] == sr:
#         return True
#     if a[m] > sr:  # среднеарифметическая левее в списке чем индекс m
#         return Proverka(a, left, m - 1, sr)
#     return Proverka(a, m + 1, right, sr)  # среднеарифметическая правее в списке чем индекс m
#
#
# f = open('26_22.txt', 'r', encoding='utf-8')
# n = int(f.readline())  # всего чисел
# a = []  # список всех чисел
# b = []  # список четных чисел
# for line in f:
#     t = int(line)
#     a.append(t)
#     if t % 2 == 0:
#         b.append(t)
# f.close()
# a.sort()  # сортировка по возрастанию
# n1 = len(b)  # количество четных чисел
# k = 0  # количество пар удовлетворяющих условию
# m = 0  # максимальная sr арифм среди пар
# #  пара - различные элементы списка b
# for i in range(n1 - 1):
#     for j in range(i + 1, n1):
#         sr = (b[i] + b[j]) // 2  #  среднее арифм пары
#         if Proverka(a, 0, n - 1, sr):
#             k += 1
#             m = max(m, sr)
# print(k, m)


'''В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны.
Необходимо определить, сколько в наборе таких пар нечётных чисел, что их среднее арифметическое тоже присутствует в
файле, и чему равно наибольшее из средних арифметических таких пар.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество чисел в наборе. Каждая из следующих N строк 
содержит одно число.
В ответе запишите два целых числа: сначала количество пар, затем наибольшее среднее арифметическое.
Пример входного файла:
6
9
10
14
13
8
11
В данном случае есть две подходящие пары: 9 и 13 (среднее арифметическое 11), 9 и 11 (среднее арифметическое 10). В 
ответе надо записать числа 2 и 11.
 '''
# f = open('26_22.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# b = []
# for line in f:
#     t = int(line)
#     a.append(t)
#     if t % 2 == 0:
#         b.append(t)
# f.close()
# n1 = len(b)
# k = 0
# m = 0
# for i in range(n1 - 1):
#     for j in range(i + 1, n1):
#         sr = (b[i] + b[j]) // 2
#         if sr in a:
#             k += 1
#             m = max(m, sr)
# print(k, m)


'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает 
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не 
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 4000). В следующих N строках 
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем 
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40,
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50
 '''
# f = open('26_6.txt', 'r', encoding='utf-8')
# r = f.readline().split()
# s = int(r[0])
# n = int(r[1])
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# k = 0
# i = 0
# c = 0
# while i < n and c + a[i] <= s:
#     c += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i-1]
# while c - m + a[i] <= s and i < n:
#     c = c - m + a[i]
#     m = a[i]
#     i += 1
# print(m)

'''В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны. 
Необходимо определить, сколько в наборе таких пар чисел, что числа в паре имеют разную чётность, а их сумма тоже 
присутствует в файле, и чему равна наибольшая из сумм таких пар.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество чисел в наборе. Каждая из следующих N строк
 содержит одно число.
В ответе запишите два целых числа: сначала количество пар, затем наибольшую сумму.
Пример входного файла:
6
3
8
14
11
22
17
В данном случае есть две подходящие пары: 3 и 8 (сумма 11), 3 и 14 (сумма 17). В ответе надо записать числа 2 и 17.'''
# def Proverka(left, right, a, s):
#     if left > right:
#         return False
#     m = (left + right) // 2
#     if a[m] == s:
#         return True
#     if a[m] > s:
#         return Proverka(left, m - 1, a, s)
#     return Proverka(m + 1, right, a, s)
#
#
# f = open('26_24.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# k = 0
# max1 = 0
# for i in range(n - 1):
#     for j in range(i + 1, n):
#         if a[i] % 2 != a[j] % 2:
#             s = a[i] + a[j]
#             if Proverka(j + 1, n - 1, a, s):
#                 k += 1
#                 max1 = max(max1, s)
# print(k, max1)


'''В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны.
Необходимо определить, сколько в наборе таких пар нечётных чисел, что их среднее арифметическое тоже присутствует в 
файле, и чему равно наибольшее из средних арифметических таких пар.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество чисел в наборе. Каждая из следующих N строк 
содержит одно число.
В ответе запишите два целых числа: сначала количество пар, затем наибольшее среднее арифметическое.
Пример входного файла:
6
9
10
14
13
8
11
В данном случае есть две подходящие пары: 9 и 13 (среднее арифметическое 11), 9 и 11 (среднее арифметическое 10). В 
ответе надо записать числа 2 и 11.'''
# def Proverka(left, right, a, sr):
#     if left > right:
#         return False
#     m = (left + right) // 2
#     if a[m] == sr:
#         return True
#     if a[m] > sr:
#         return Proverka(left, m - 1, a, sr)
#     return Proverka(m + 1, right, a, sr)
#
#
# f = open('26_23.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# n = len(a)
# k = 0
# m = 0
# for i in range(n - 1):
#     for j in range(i + 1, n):
#         if a[i] % 2 == 1 and a[j] % 2 == 1:
#             sr = (a[i] + a[j]) // 2
#             if Proverka(i, j, a, sr):
#                 k += 1
#                 m = max(m, sr)
# print(k, m)


'''На грузовом судне необходимо перевезти контейнеры, имеющие одинаковый габарит и разные массы (некоторые контейнеры
могут иметь одинаковую массу). Общая масса всех контейнеров превышает грузоподъёмность судна. Количество грузовых мест
на судне не меньше количества контейнеров, назначенных к перевозке. Какое максимальное количество контейнеров можно 
перевезти за один рейс и какова масса самого тяжёлого контейнера среди всех контейнеров, которые можно перевезти за 
один рейс?
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— грузоподъёмность судна (натуральное число, не превышающее 
100 000) и N— количество контейнеров (натуральное число, не превышающее 20 000). В следующих N строках находятся 
значения масс контейнеров, требующих транспортировки (все числа натуральные, не превышающие 100), каждое в отдельной
строке.
 
Выходные данные.
Два целых неотрицательных числа: максимальное количество контейнеров, которые можно перевезти за один рейс и масса 
наиболее тяжёлого из них.
 
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно транспортировать за один раз максимум два контейнера. Возможные массы этих двух 
контейнеров 30 и 40, 30 и 50 или 40 и 50. Поэтому ответ для приведённого примера: 2 50.'''
# f = open('26_25.txt', 'r', encoding='utf')
# r = f.readline().split()
# s = int(r[0])
# n = int(r[1])
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# k = 0
# i = 0
# c = 0
# while i < n and c + a[i] <= s:
#     c += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i - 1]
# while i < n and c - m + a[i] <= s:
#     c = c - m + a[i]
#     m = a[i]
#     i += 1
# print(m)


'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не 
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 3000). В следующих N строках
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной 
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера: 2 50'''
# f = open('26_7.txt', 'r', encoding='utf-8')
# p = f.readline().split()
# s = int(p[0])
# n = int(p[1])
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# i = 0
# k = 0
# r = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     k += 1
#     i += 1
# print(k)
# m = a[i - 1]
# while i < n and r - m + a[i] <= s:
#     r = r - m + a[i]
#     m = a[i]
#     i += 1
# print(m)

'''В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны.
Необходимо определить, сколько в наборе таких пар чисел, что числа в паре имеют одинаковую чётность, а их сумма тоже 
присутствует в файле, и чему равна наибольшая из сумм таких пар.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество чисел в наборе. Каждая из следующих N строк
содержит одно число.
В ответе запишите два целых числа: сначала количество пар, затем наибольшую сумму.
Пример входного файла:
6
3
8
14
11
22
17
В данном случае есть две подходящие пары: 3 и 11 (сумма 14), 8 и 14 (сумма 22). В ответе надо записать числа 2 и 22.'''





'''В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны.
Необходимо определить, сколько в наборе таких пар чисел, что числа в паре имеют одинаковую чётность, а их сумма тоже
присутствует в файле, и чему равна наибольшая из сумм таких пар.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество чисел в наборе. Каждая из следующих N строк 
содержит одно число.
В ответе запишите два целых числа: сначала количество пар, затем наибольшую сумму.
Пример входного файла:
6
3
8
14
11
22
17
В данном случае есть две подходящие пары: 3 и 11 (сумма 14), 8 и 14 (сумма 22). В ответе надо записать числа 2 и 22.'''
# def Proverka(left, right, a, s):
#     if left > right:
#         return False
#     m = (left + right) // 2
#     if a[m] == s:
#         return True
#     if a[m] > s:
#         return Proverka(left, m - 1, a, s)
#     return Proverka(m + 1, right, a, s)
#
#
# f = open('26_26.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# k = 0
# max1 = 0
# for i in range(n - 1):
#     for j in range(i + 1, n):
#         if a[i] % 2 == a[j] % 2:
#             s = a[i] + a[j]
#             if Proverka(j + 1, n - 1, a, s):
#                 k += 1
#                 max1 = max(max1, s)
# print(k, max1)


'''Предприятие производит закупку изделий A и B, на которую выделена определённая сумма денег. У поставщика есть в 
наличии различные модификации этих изделий по различной цене. При покупке необходимо руководствоваться следующими 
правилами:
1.Нужно купить как можно больше изделий, независимо от их типа и модификации.
2.Если можно разными способами купить максимальное количество изделий, нужно выбрать тот способ, при котором будет
куплено как можно больше изделий A.
3.Если можно разными способами купить максимальное количество изделий с одинаковым количеством изделий A, нужно выбрать 
тот способ, при котором вся покупка будет дешевле.
Определите, сколько всего будет куплено изделий A и какая сумма останется неиспользованной.
Входные данные.
Задание 26
Первая строка входного файла содержит два целых числа: N— общее количество изделий у поставщика и M— сумма выделенных на
закупку денег (в рублях). Каждая из следующих N строк содержит целое число (цена изделия в рублях) и символ (латинская
буква A или B), определяющий тип изделия. Все данные в строках входного файла отделены одним пробелом.
В ответе запишите два целых числа: сначала количество закупленных изделий типа A, затем оставшуюся неиспользованной
сумму денег.
Пример входного файла:
6 130
30 B
50 B
60 A
20 A
70 A
10 B
В данном случае можно купить не более 4 изделий, из них не более 2 изделий A. Минимальная цена такой покупки 120 руб.
(покупаем изделия 30B, 60A, 20A, 10B). Останется 10 руб. В ответе надо записать числа 2 и 10.
 '''
# def Sort_ab(x):  # для каждой пары возвращаем цену
#     return x[0]


# f = open('26_28.txt', 'r', encoding='utf-8')
# r = f.readline().split()
# n = int(r[0])  # общее количество изделий у поставщика
# m = int(r[1])  # сумма выделенных на закупку денег (в рублях)
# a = []  # список для изделий а
# b = []  # список для изделий b
# ab = []  # список для всех изделий
# for line in f:
#     t = line.split()  # информация о цене и типе(отдельно про каждый товар, берем по строчке)
#     t[0] = int(t[0])  # берем цену и преобразуем в число
#     ab.append(t)  # добавляем информацию о цене и типе(отдельно про каждый товар)
#     if t[1] == 'A':  # проверяем к какому изделию относится товар и добавляем в нужный список
#         a.append(t[0])
#     else:
#         b.append(t[0])
# f.close()
# a.sort()  # сортируем список a
# b.sort()  # сортируем список b
# ab.sort(key=lambda x : Sort_ab(x))  # сортируем список ab по цене с помощью функции
# max_k = 0  # максимальное количество
# max_s = 0  # максимальная сумма
# i = 0
# while i < n and max_s + ab[i][0] <= m:
#     max_s += ab[i][0]
#     max_k += 1
#     i += 1
# i = 0
# n1 = len(a)
# n2 = len(b)
# max_sa = []
# max_sb = []
# while i < n1 and sum(max_sa) + a[i] <= m and len(max_sa) < max_k:
#     max_sa.append(a[i])
#     i += 1
# j = 0
# while j < n2 and len(max_sa) + len(max_sb) < max_k:
#     if sum(max_sa) + sum(max_sb) + b[j] <= m:
#         max_sb.append(b[j])
#         j += 1
#     else:
#         while sum(max_sa) + sum(max_sb) + b[j] > m:
#             max_sa.pop()
#         max_sb.append(b[j])
#         j += 1
# print(len(max_sa), m - sum(max_sa) - sum(max_sb))

'''Организация купила для своих сотрудников все места в нескольких подряд идущих рядах на концертной площадке. Известно,
какие места уже распределены между сотрудниками. Найдите ряд с наибольшим номером, в котором есть два соседних места, 
таких что слева и справа от них в том же ряду места уже распределены (заняты). Гарантируется, что есть хотя бы один ряд,
удовлетворяющий условию. В ответе запишите два целых числа: номер ряда и наименьший номер места из найденных в этом ряду
подходящих пар.
Входные данные.
Задание 26
В первой строке входного файла находится одно число: N— количество занятых мест (натуральное число, не превышающее 
10000). В следующих N строках находятся пары чисел: ряд и место выкупленного билета (числа не превышают 100000).
В ответе запишите два целых числа: сначала максимальный номер ряда, где нашлись обозначенные в задаче места 
и минимальный номер места.
Пример входного файла:
6
50 12
50 15
60 157
60 160
60 22
60 25
Для данного примера ответом будет являться пара чисел 60 и 23.'''
# f = open('26_27.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# row = [] # список рядов
# places = []  # список мест соответственно каждому ряду
# for line in f:
#     t = line.split()
#     t = list(map(int, t))
#     if t[0] in row:  # если такой ряд уже был
#         p = row.index(t[0])  # находим индекс ряда
#         places[p].append(t[1])  # добавляем номер места по индексу мест этого ряда
#     else:
#         row.append(t[0])  # создаем ряд
#         places.append([t[1]])  # добавляем список мест для нового ряда
# f.close()
# n1 = len(row)  # кол-во рядов
# # сортировка рядов и соответствующих им мест по убыванию номера ряда
# for i in range(n1 - 1):
#     for j in range(n1 - i - 1):
#         if row[j] < row[j + 1]:
#             row[j], row[j + 1] = row[j + 1], row[j]
#             places[j], places[j + 1] = places[j + 1], places[j]
#
# for i in range(n1):
#     places[i].sort()  # сортируем места в каждом ряду по возрастанию
# i = 0  # индекс ряда и соответствующего ему списка мест
# while i < n1:
#     q = 0  # флаг того что мы нашли нужное место
#     j = 0  # индекс места в данном ряду
#     n2 = len(places[i])  # кол-во мест в данном ряду
#     while j < n2 - 1:
#         if places[i][j + 1] - places[i][j] - 1 == 2:  # проверка что между двумя соседними местами ровно два места
#             print(row[i], places[i][j] + 1)  # номер максимального ряда, номер минимального места
#             q = 1  # условие выполнено флаг - истина
#             break
#         else:
#             j += 1  # переходим к следующему месту
#     if q:  # уже нашли результат прерываем программу
#         break
#     else:
#         i += 1  # переход к следующему ряду

# f = open('26_27.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# nums = []
# for _ in range(n):
#     pair = list(map(int, f.readline().split()))
#     pair[1] = pair[1]
#     nums += [pair]
# nums.sort()
# r, m = 0, 0
# for i in range(1, len(nums)):
#     if nums[i][0] == nums[i-1][0] and nums[i][0] != r:
#         if nums[i][1]-nums[i - 1][1] == 3:
#             r = nums[i][0]
#             m = nums[i - 1][1] + 1
# print(r, m)

'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не 
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 2000). В следующих N строках 
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем 
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40,
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''
# f = open('26_8.txt', 'r', encoding='utf-8')
# r = f.readline().split()
# s = int(r[0])
# n = int(r[1])
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# i = 0
# r = 0
# k = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i - 1]
# while i < n and r + a[i] - m <= s:
#     r = r + a[i] - m
#     m = a[i]
#     i += 1
# print(m)

'''Предприятие производит закупку изделий A и B, на которую выделена определённая сумма денег. У поставщика есть в
наличии различные модификации этих изделий по различной цене. При покупке необходимо руководствоваться следующими 
правилами:
1.Нужно купить как можно больше изделий, независимо от их типа и модификации.
2.Если можно разными способами купить максимальное количество изделий, нужно выбрать тот способ, при котором будет 
куплено как можно больше изделий B.
3.Если можно разными способами купить максимальное количество изделий с одинаковым количеством изделий B, нужно выбрать 
тот способ, при котором вся покупка будет дешевле.
Определите, сколько всего будет куплено изделий B и какая сумма останется неиспользованной.
Входные данные.
Задание 26
Первая строка входного файла содержит два целых числа: N— общее количество изделий у поставщика и M— сумма выделенных на
закупку денег (в рублях). Каждая из следующих N строк содержит целое число (цена изделия в рублях) и символ (латинская 
буква A или B), определяющий тип изделия. Все данные в строках входного файла отделены одним пробелом.
В ответе запишите два целых числа: сначала количество закупленных изделий типа B, затем оставшуюся неиспользованной 
сумму денег.
Пример входного файла:
6 130
30 A
50 A
60 B
20 B
70 B
10 A
В данном случае можно купить не более 4 изделий, из них не более 2 изделий B. Минимальная цена такой покупки 120 рублей
(покупаем изделия 30A, 60B, 20B, 10A). Останется 10 рублей. В ответе надо записать числа 2 и 10.'''
# def Sort_ab(x):
#     return x[0]
#
#
# f = open('rt.txt', 'r', encoding='utf-8')
# r = f.readline().split()
# n = int(r[0])
# m = int(r[1])
# a = []
# b = []
# ab = []
# for line in f:
#     t = line.split()
#     t[0] = int(t[0])
#     ab.append(t)
#     if t[1] == 'A':
#         a.append(t[0])
#     else:
#         b.append(t[0])
# f.close()
# a.sort()
# b.sort()
# ab.sort(key=lambda x : Sort_ab(x))
# max_k = 0
# max_s = 0
# i = 0
# while i < n and max_s + ab[i][0] <= m:
#     max_s += ab[i][0]
#     max_k += 1
#     i += 1
# i = 0
# n1 = len(a)
# n2 = len(b)
# max_sa = []
# max_sb = []
# while i < n2 and sum(max_sb) + a[i] <= m and len(max_sb) < max_k:
#     max_sb.append(a[i])
#     i += 1
# j = 0
# while j < n1 and len(max_sb) + len(max_sa) < max_k:
#     if sum(max_sa) + sum(max_sb) + a[j] <= m:
#         max_sa.append(a[j])
#         j += 1
#     else:
#         while sum(max_sa) + sum(max_sb) + b[j] > m:
#             max_sb.pop()
#         max_sa.append(a[j])
#         j += 1
# print(len(max_sb), m - sum(max_sb) - sum(max_sa))



'''В лесничестве саженцы сосны высадили параллельными рядами, которые пронумерованы идущими подряд натуральными числами.
Растения в каждом ряду пронумерованы натуральными числами начиная с единицы.
По данным аэрофотосъёмки известно, в каких рядах и на каких местах растения не прижились. Найдите ряд с наибольшим 
номером, в котором есть ровно 13 идущих подряд свободных мест для посадки новых сосен, таких, что непосредственно слева
и справа от них в том же ряду растут сосны. Гарантируется, что есть хотя бы один ряд, удовлетворяющий этому условию. В
ответе запишите два целых числа: наибольший номер ряда и наименьший номер места для посадки из числа найденных в этом 
ряду подходящих последовательностей из 13 свободных мест.
Входные данные.
26.txt
В первой строке входного файла находится число N— количество прижившихся саженцев сосны (натуральное число, не
превышающее 20 000). Каждая из следующих N строк содержит два натуральных числа, не превышающих 100 000: номер ряда и 
номер места в этом ряду, на котором растёт деревце.
Выходные данные
Два целых неотрицательных числа: наибольший номер ряда и наименьший номер места в выбранной последовательности из 13 
мест, подходящих для посадки новых сосен.
Типовой пример организации входных данных
7
40 3
40 7
60 33
50 125
50 129
50 68
50 72
Для приведённого примера, при условии, что необходимо 3 свободных места, ответом является пара чисел: 50; 69.
Типовой пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемых файлов.'''
# f = open('26_32.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# row = []
# places = []
# for line in f:
#     t = line.split()
#     t = list(map(int, t))
#     if t[0] in row:
#         p = row.index(t[0])
#         places[p].append(t[1])
#     else:
#         row.append(t[0])
#         places.append([t[1]])
# f.close()
# n1 = len(row)
# for i in range(n1 - 1):
#     for j in range(n1 - i - 1):
#         if row[j] < row[j + 1]:
#             row[j], row[j + 1] = row[j + 1], row[j]
#             places[j], places[j + 1] = places[j + 1], places[j]
# for i in range(n1):
#     places[i].sort()
# i = 0
# while i < n1:
#     q = 0
#     j = 0
#     n2 = len(places[i])
#     while j < n2 - 1:
#         if places[i][j + 1] - places[i][j] - 1 == 13:
#             print(row[i], places[i][j] + 1)
#             q = 1
#             break
#         else:
#             j += 1
#     if q == 1:
#         break
#     else:
#         i += 1

'''Во многих компьютерных системах текущее время хранится в формате «UNIX-время»— количестве секунд от начала суток 1
января 1970 года.
В одной компьютерной системе проводили исследование загруженности. Для этого в течение месяца с момента UNIX-времени 
1633046400 фиксировали и заносили в базу данных моменты старта и финиша всех процессов, действовавших в этой системе.
Вам необходимо определить, какое наибольшее количество процессов выполнялось в системе одновременно на неделе, 
начавшейся в момент UNIX-времени 1633305600, и в течение какого суммарного времени (в секундах) выполнялось такое
наибольшее количество процессов.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество процессов за весь период наблюдения. Каждая из 
следующих N строк содержит 2 целых числа: время старта и время завершения одного процесса в виде UNIX-времени. Все 
данные в строках входного файла отделены одним пробелом.
Если в качестве времени старта указан ноль, это означает, что процесс был активен в момент начала исследования. Если в
качестве времени завершения указан ноль, это означает, что процесс не завершился к моменту окончания исследования.
При совпадающем времени считается, что все старты и завершения процессов происходят одновременно, в начале
соответствующей секунды. В частности, если время старта одного процесса совпадает с временем завершения другого и других
стартов и завершений в этот момент нет, то количество активных процессов в этот момент не изменяется.
В ответе запишите два целых числа: сначала максимальное количество процессов, которые выполнялись одновременно на 
неделе, начиная с момента UNIX-времени 1633305600, затем суммарное количество секунд, в течение которых на этой неделе
выполнялось такое максимальное количество процессов.'''
# f = open('rt.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# for line in f:
#     t = line.split()
#     t = list(map(int, t))
#     a.append(t)
# start = 1633305600
# end = start + 7 * 24 * 60 * 60
# sec = 7 * 24 * 3600
# count = [0] * sec
# sec_count = [0] * sec
# t1 = t2 = 0
# for time in a:
#     if (t[1] >= start or t[1] == 0) and t[0] <= end:
#         if t[0] >= start:
#             t1 = t[0] - start
#         else:
#             t1 = 0
#         if t[1] <= end:
#             t2 = t[1] - start
#         else:
#             t2 = sec - 1
#         for i in range(t1, t2 + 1):
#             count[i] += 1
#             sec_count[i] += (t2 - t1 + 1)
# m = max(count)
# poz = count.index(m)
# print(m)

'''При проведении эксперимента заряженные частицы попадают на чувствительный экран, представляющий из себя матрицу
размером 10000 на 10000 точек. При попадании каждой частицы на экран в протоколе фиксируются координаты попадания: номер
ряда (целое число от 1 до 10000) и номер позиции в ряду (целое число от 1 до 10000).
Точка экрана, в которую попала хотя бы одна частица, считается светлой, точка, в которую ни одна частица не попала,
— тёмной.
При анализе результатов эксперимента рассматривают группы светлых точек, расположенных в одном ряду подряд, то есть без
тёмных точек между ними.
Вам необходимо по заданному протоколу определить максимальную длину такой группы и номер ряда, в котором эта группа 
встречается. Если таких рядов несколько, укажите минимально возможный номер.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество частиц, попавших на экран. Каждая из следующих N
строк содержит 2 целых числа: номер ряда и номер позиции в ряду.
В ответе запишите два целых числа: сначала максимальную длину непрерывной группы светлых точек, затем— номер ряда, в 
котором эта группа встречается.'''
# f = open('26_33.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# row = []
# place = []
# for line in f:
#     t = line.split()
#     t = list(map(int, t))
#     if t[0] in row:
#         poz = row.index(t[0])
#         place[poz].append(t[1])
#     else:
#         row.append(t[0])
#         place.append([t[1]])
# f.close()
# n1 = len(row)
# for i in range(n1 - 1):
#     for j in range(n1 - i - 1):
#         if row[j] > row[j + 1]:
#             row[j], row[j + 1] = row[j + 1], row[j]
#             place[j], place[j + 1] = place[j + 1], place[j]
# for i in range(n1):
#     place[i].sort()
# m = 0
# r = - 1
# for i in range(n1):
#     n2 = len(place[i])
#     k = 1
#     for j in range(1, n2):
#         if place[i][j] - 1 == place[i][j - 1]:
#             k += 1
#         else:
#             if k > m:
#                 m = k
#                 r = row[i]
#             k = 1
#     if k > m:
#         m = k
#         r = row[i]
# print(m, r)
#
# f = open('26 (11).txt')
# n = int(f.readline())
# a = [[0] * 10001 for j in range(10001)]
# for i in range(n):
#     x, y = map(int, f.readline().split())
#     a[x][y] = 1
# maxi = 0
# mini = 0
# for i in range(10001):
#     count = 0
#     m = 0
#     for j in range(10001):
#         if a[i][j] == 1:
#             count += 1
#             m = max(count, m)
#         else:
#             count = 0
#     if m > maxi:
#         maxi = max(maxi, m)
#         mini = i
# print(maxi, mini)

'''Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает
архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого 
пользователя.
По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число
пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть 
сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
Входные данные.
Задание 26
В первой строке входного файла находятся два числа: S— размер свободного места на диске (натуральное число, не
превышающее 10 000) и N— количество пользователей (натуральное число, не превышающее 2000). В следующих N строках
находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной
строке.
Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем 
максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально
возможного числа пользователей.
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 
30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар— 50, поэтому ответ для приведённого примера:
2 50'''
# f = open('26_9.txt', 'r', encoding='utf-8')
# h = f.readline().split()
# s = int(h[0])
# n = int(h[1])
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# n = len(a)
# i = 0
# r = 0
# k = 0
# while i < n and r + a[i] <= s:
#     r += a[i]
#     i += 1
#     k += 1
# print(k)
# m = a[i - 1]
# while i < n and r - m + a[i] <= s:
#     r = r - m + a[i]
#     m = a[i]
#     i += 1
# print(m)

'''При проведении эксперимента заряженные частицы попадают на чувствительный экран, представляющий из себя матрицу 
размером 10000 на 10000 точек. При попадании каждой частицы на экран в протоколе фиксируются координаты попадания: номер
ряда (целое число от 1 до 10000) и номер позиции в ряду (целое число от 1 до 10000).
Точка экрана, в которую попала хотя бы одна частица, считается светлой, точка, в которую ни одна частица не попала,
— тёмной.
При анализе результатов эксперимента рассматривают группы светлых точек, расположенных в одном ряду так, что между 
каждыми двумя соседними светлыми точками находится ровно одна тёмная.
Вам необходимо по заданному протоколу определить максимальную длину такой группы и номер ряда, в котором эта группа 
встречается. Если таких рядов несколько, укажите минимально возможный номер.
Входные данные.
Задание 26
Первая строка входного файла содержит целое число N— общее количество частиц, попавших на экран. Каждая из следующих N 
строк содержит 2 целых числа: номер ряда и номер позиции в ряду.
В ответе запишите два целых числа: сначала максимальную длину непрерывной группы светлых точек, затем— номер ряда, в 
котором эта группа встречается.'''
# f = open('26_34.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# row = []
# place = []
# for line in f:
#     t = line.split()
#     t = list(map(int, t))
#     if t[0] in row:
#         poz = row.index(t[0])
#         place[poz].append(t[1])
#     else:
#         row.append(t[0])
#         place.append([t[1]])
# f.close()
# n1 = len(row)
# for i in range(n1 - 1):
#     for j in range(n1 - i - 1):
#         if row[j] > row[j + 1]:
#             row[j], row[j + 1] = row[j + 1], row[j]
#             place[j], place[j + 1] = place[j + 1], place[j]
# for i in range(n1):
#     place[i] = set(place[i])
#     place[i] = list(place[i])
#     place[i].sort()
# m = 0
# r = -1
# for i in range(n1):
#     n2 = len(place[i])
#     k = 1
#     for j in range(1, n2):
#         if place[i][j] - place[i][j - 1] - 1 == 1:
#             k += 1
#         else:
#             if k > m:
#                 m = k
#                 r = row[i]
#             k = 1
#     if k > m:
#         m = k
#         r = row[i]
# print(m, r)

'''В магазине для упаковки подарков есть N кубических коробок. Самой интересной считается упаковка подарка по принципу
матрёшки— подарок упаковывается в одну из коробок, та в свою очередь в другую коробку и т.д. Одну коробку можно 
поместить в другую, если длина её стороны хотя бы на 3 единицы меньше длины стороны другой коробки.
Определите наибольшее количество коробок, которое можно использовать для упаковки одного подарка, и максимально
возможную длину стороны самой маленькой коробки, где будет находиться подарок. Размер подарка позволяет поместить его в
самую маленькую коробку.
Входные данные.
Задание 26
В первой строке входного файла находится число N— количество коробок в магазине (натуральное число, не превышающее 
10000). В следующих N строках находятся значения длин сторон коробок (все числа натуральные, не превышающие 10000), 
каждое— в отдельной строке.
Запишите в ответе два целых числа: сначала наибольшее количество коробок, которое можно использовать для упаковки одного
подарка, затем максимально возможную длину стороны самой маленькой коробки в таком наборе.
Пример входного файла:
5
43
40
32
40
30
Пример входного файла приведён для пяти коробок и случая, когда минимальная допустимая разница между длинами сторон 
коробок, подходящих для упаковки «матрёшкой», составляет 3 единицы.
При таких исходных данных условию задачи удовлетворяют наборы коробок с длинами сторон 30, 40 и 43 или 32, 40 и 43
соответственно, т.е. количество коробок равно 3, а длина стороны самой маленькой коробки равна 32.'''
# f = open('26_35.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# b = []
# b.append(a[0])
# for i in range(1, n):
#     if a[i] - b[-1] >= 3:
#         b.append(a[i])
# k = len(b)
# m = b[0]
# for i in range(n - 1, -1, -1):
#     c = [a[i]]
#     for j in range(i + 1, n):
#         if a[j] - c[-1] >= 3:
#             c.append(a[j])
#     if len(c) == k:
#         m = c[0]
#         break
# print(k, m)





#
# f = open('26 (11).txt')
# n = int(f.readline())
# a = [[0] * 10001 for j in range(10001)]
# for i in range(n):
#     x, y = map(int, f.readline().split())
#     a[x][y] = 1
# maxi = 0
# mini = 0
# for i in range(10001):
#     count = 0
#     m = 0
#     for j in range(10001):
#         if a[i][j] == 1:
#             count += 1
#             m = max(count, m)
#         else:
#             count = 0
#     if m > maxi:
#         maxi = max(maxi, m)
#         mini = i
# print(maxi, mini)
# gryffindor_score = int(input())
# k = 0
# while gryffindor_score > 0:
#     s = int(input())
#     k += 1
#     gryffindor_score -= s
# print(k)

# s = input().split(', ')
# m = input().split(', ')
# n = len(m)
# for i in range(n):
#     if int(m[i]) > 4:
#         print(f"{s[i]} получил/a {m[i]}")

# f = ['a', 'c', 'i']
# def Spell(name):
#     if name in f:
#         print('no')
#     else:
#         print('yes')
# name = input()
# Spell(name)

# g = input().split()
# s = input().split()
# d = []
# for i in g:
#     if i in s:
#         d.append(i)
# d.sort()
# print(*d, sep=', ')


# def Get(d, s):
#     a = []
#     for i in d:
#         if s in d[i]:
#             a.append(i)
#     a.sort()
#     return a
#
# d = {'a':['s', 'd', 'h'], 'b':['s', 'e', 'm'], 'c':['r', 't', 'h']}
# print(Get(d, 'h'))


# h = []
# a = input()
# while a != 'End':
#     t = a.split()
#     t1 = t[0]
#     t2 = list(map(int, t[1:]))
#     h.append([t1, t2])
#     a = input()
# b = float(input())
# n = []
# for i in h:
#     if sum(i[1]) / len(i[1]) >= b:
#         n.append(i[0])
# n.sort()
# print(*n, sep=', ')

'''Продавец предоставляет покупателю, делающему большую закупку, скидку по следующим правилам:
— на каждый второй товар стоимостью больше 50 рублей предоставляется скидка 25%;
— общая стоимость покупки со скидкой округляется вверх до целого числа рублей;
— порядок товаров в списке определяет продавец и делает это так, чтобы общая сумма скидки была наименьшей.
По известной стоимости каждого товара в покупке необходимо определить общую стоимость покупки с учётом скидки и 
стоимость самого дорогого товара, на который будет предоставлена скидка.
Входные данные.
Задание 26
Первая строка входного файла содержит число N— общее количество купленных товаров. Каждая из следующих N строк содержит
одно целое число— стоимость товара в рублях.
В ответе запишите два целых числа: сначала общую стоимость покупки с учётом скидки, затем стоимость самого дорогого
товара, на который будет предоставлена скидка.
Пример входного файла:
6
125
50
490
215
144
320
В данном случае товар стоимостью 50 не участвует в определении скидки, остальные товары продавцу выгодно расположить в 
таком порядке цен: 490, 125, 215, 144, 320. Тогда скидка предоставляется на товары стоимостью 125 и 144. Стоимость этих 
двух товаров со скидкой составит 201,75 руб., после округления— 202 руб. Общая стоимость покупки составит:
50 + 490 + 215 + 320 + 202 = 1277 руб.
Самый дорогой товар, на который будет получена скидка, стоит 144 руб. В ответе нужно записать числа 1277 и 144.'''
# from math import ceil
# f = open('26_16.txt', 'r', encoding='utf-8')
# t = int(f.readline())
# a = []
# s = 0
# for line in f:
#     if int(line) <= 50:
#         s += int(line)
#     else:
#         a.append(int(line))
# f.close()
# a.sort()
# n = len(a)
# min_a = a[:n//2]
# max_a = a[n//2:]
# s += sum(max_a)
# for i in min_a:
#     s += i * 0.75
# s = ceil(s)
# print(s, max(min_a))


'''(№ 5325) (ЕГЭ-2022) В магазине для упаковки подарков есть N кубических коробок. Самой интересной считается упаковка 
подарка по принципу матрешки – подарок упаковывается в одну из коробок, та, в свою очередь, в другую коробку и т.д. Одну
коробку можно поместить в другую, если длина её стороны хотя бы на 3 единицы меньше длины стороны другой коробки.
Определите наибольшее количество коробок, которое можно использовать для упаковки одного подарка, и максимально 
возможную длину стороны самой маленькой коробки, где будет находиться подарок. Размер подарка позволяет поместить его в 
самую маленькую коробку.
Входные данные представлены в файле 26-89.txt следующим образом. В первой строке входного файла записано число N – 
количество коробок в магазине (натуральное число, не превышающее 10 000). В каждой из следующих N строк находится 
значения длины стороны очередной коробки (натуральное число, не превышающее 10 000). 
Запишите в ответе два целых числа: сначала наибольшее количество коробок, которое можно использовать для упаковки одного
подарка, затем максимально возможную длину стороны самой маленькой коробки в таком наборе.
Пример входного файла::
5
43
40
32
40
30 
При таких исходных данных условию задачи удовлетворяют наборы коробок с длинами сторон 30, 40 и 43 или 32, 40 и 43 
соответственно. В обоих случаях количество коробок равно 3, а длина стороны самой маленькой коробки равна 32. 
Ответ: 3 32.'''
# f = open('26_st', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# b = []
# b.append(a[0])
# for i in range(1, n):
#     if a[i] - b[-1] >= 3:
#         b.append(a[i])
# k = len(b)
# m = b[0]
# for i in range(n - 1, - 1, -1):
#     c = [a[i]]
#     for j in range(i + 1, n):
#         if a[j] - c[-1] >= 3:
#             c.append(a[j])
#     if len(c) == k:
#         m = c[0]
#         break
# print(k, m)


'''(№ 6095) При проведении эксперимента заряженные частицы попадают на чувствительный экран, представляющий из себя 
матрицу размером 100 000 на 100 000 точек. При попадании каждой частицы на экран в протоколе фиксируются координаты 
попадания: номер ряда (целое число от 1 до 100 000) и номер позиции в ряду (целое число от 1 до 100 000). Точка экрана,
в которую попала хотя бы одна частица, считается светлой, точка, в которую ни одна частица не попала, – тёмной.
При анализе результатов эксперимента рассматривают линии. Линией называют группу светлых точек, расположенных в одном
ряду подряд, то есть без тёмных точек между ними. Линия должна содержать не менее K светлых точек, слева и справа от 
линии должна быть тёмная точка или край
экрана. Вам необходимо по заданному протоколу определить наибольшее количество линий, расположенных в одном ряду, и 
номер ряда, в котором это количество встречается. Если таких рядов несколько, укажите максимально возможный номер.
Входные данные представлены в файле 26-104.txt следующим образом. В первой строке входного файла записано натуральное 
число N (1 ≤ N ≤ 100 000) – общее количество частиц, попавших на экран и натуральное число K (1 ≤ N ≤ 100 000) – 
минимальное число точек, образующих линию. Каждая из следующих N строк содержит два натуральных числа, не превышающих 
100 000: номер ряда и номер позиции в ряду.
Пример входного файла::
7 3
2 1
1 7
1 8
2 3
1 9
2 4
2 2
В данном случае существует две строки с номерами 1 и 2, которые содержат по одной линии длины 3 и 4 соответственно.
Ответ: 1 2.'''
# f = open('rt.txt', 'r', encoding='utf-8')
# t = f.readline().split()
# n = int(t[0])  # общее количество частиц, попавших на экран
# k = int(t[1])  # натуральное число K (1 ≤ N ≤ 100 000) – минимальное число точек, образующих линию.
# a = []
# for i in range(100000):   # 100000 рядов(списков во внешнем списке а)
#     b = [0] * 100000   # каждый ряд, состоящий изначально из 100000 черных точек(ноликов)
#     a.append(b)
# for line in f:
#     t = line.split()
#     t = list(map(int, t))
#     a[t[0] - 1][t[1] - 1] = 1   # помечаем единичкой светлую точку находящуюся в t[0] ряду в t[1] столбце
# f.close()
# maxk = 0   # максимальное кол-во линий длины >= k в одном ряду
# nr = -1   # номер ряда с максимальным кол-вом линий длины >= k
# for i in range(100000):  # проходимся по всем рядам
#     ki = 0  # кол-во линий длины >= k в текущем ряду
#     k1 = 0  # кол-во светлых точек в текущей линии
#     for j in range(100000):  # проходимся по всем точкам данного ряда
#         if a[i][j] == 1:   # если точка светлая
#             k1 += 1
#         else:  # если точка темная
#             if k1 >= k:  # если данная линия длины >= k
#                 ki += 1
#             k1 = 0
#     if k1 >= k:  # если последняя линия длины >= k
#         ki += 1
#     if ki >= maxk:  # если кол-во линий(длины >= k) в данном ряду больше или равно(так как ищем ряд с макс номером)
#         maxk = ki   # переприсваиваем максимум
#         nr = i + 1   # запоминаем номер ряда
# print(maxk, nr)


'''№ 5402) (А. Богданов) При проведении эксперимента заряженные частицы попадают на чувствительный экран, представляющий
из себя матрицу пикселей размером 10000 на 10000 точек. При попадании очередной частицы на экран в файл записываются 
координаты чувствительного элемента: номер строки (целое число от 1 до 10000) и номер позиции в строке (целое число от 1
до 10000) и её заряд (+/-). Положительно заряженная частица включает пиксель, а отрицательно заряженная выключает. 
Положительная частица не влияет на включенный пиксель, как и отрицательно заряженная на выключенный. Определите на 
момент завершения эксперимента номер строки, в которой находится наибольшая непрерывная цепочка включенных пикселей. 
Входные данные представлены в файле 26-92.txt следующим образом. В первой строке записано количество строк с данными N
(1 ≤ N ≤ 1000000). В каждой из следующих N строк записаны два натуральных числа, не превышающих 10000 – координаты 
сработавшего чувствительного элемента (сначала строка, затем позиция пикселя в этой строке), а затем – знак «+» или «–»,
отделенный от чисел пробелом.
Запишите в ответе два числа: сначала длину наибольшей непрерывной цепочки включенных пикселей одной строки, затем –
номер строки, в которой находятся эта цепочка. Если таких строк несколько, укажите номер последней из подходящих строк.
Пример входного файла:
8
2 5 +
2 6 +
1 2 +
2 7 +
1 3 -
2 6 +
2 4 +
2 7 -
При таких исходных данных задачи на момент завершения эксперимента в строке 1 включен только пиксель в позиции 2, а в 
строке 2 – три пикселя подряд в позициях 4, 5 и 6. Ответ: 3 2.'''

'''В магазине для упаковки подарков есть N кубических коробок. Самой интересной считается упаковка подарка по принципу
матрёшки— подарок упаковывается в одну из коробок, та в свою очередь в другую коробку и т.д. Одну коробку можно 
поместить в другую, если длина её стороны хотя бы на 3 единицы меньше длины стороны другой коробки.
Определите наибольшее количество коробок, которое можно использовать для упаковки одного подарка, и максимально
возможную длину стороны самой маленькой коробки, где будет находиться подарок. Размер подарка позволяет поместить его в
самую маленькую коробку.
Входные данные.
Задание 26
В первой строке входного файла находится число N— количество коробок в магазине (натуральное число, не превышающее 
10000). В следующих N строках находятся значения длин сторон коробок (все числа натуральные, не превышающие 10000), 
каждое— в отдельной строке.
Запишите в ответе два целых числа: сначала наибольшее количество коробок, которое можно использовать для упаковки одного
подарка, затем максимально возможную длину стороны самой маленькой коробки в таком наборе.
Пример входного файла:
5
43
40
32
40
30
Пример входного файла приведён для пяти коробок и случая, когда минимальная допустимая разница между длинами сторон 
коробок, подходящих для упаковки «матрёшкой», составляет 3 единицы.
При таких исходных данных условию задачи удовлетворяют наборы коробок с длинами сторон 30, 40 и 43 или 32, 40 и 43
соответственно, т.е. количество коробок равно 3, а длина стороны самой маленькой коробки равна 32.'''
# f = open('26_35.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# a = []
# for line in f:
#     a.append(int(line))
# f.close()
# a.sort()
# b = []
# b.append(a[0])
# for i in range(1, n):
#     if a[i] - b[-1] >= 3:
#         b.append(a[i])
# k = len(b)
# m = b[0]
# for i in range(n - 1, -1, -1):
#     c = [a[i]]
#     for j in range(i + 1, n):
#         if a[j] - c[-1] >= 3:
#             c.append(a[j])
#     if len(c) == k:
#         m = c[0]
#         break
# print(k, m)



'''В аэропорту есть камера хранения из K ячеек, которые пронумерованы с 1.
Принимаемый багаж кладется в свободную ячейку с минимальным номером.
Известно время, когда пассажиры сдают и забирают багаж (в минутах с начала
суток). Ячейка доступна для багажа, начиная со следующей минуты, после
окончания срока хранения. Если свободных ячеек не находится, то багаж не
принимается в камеру хранения.

Найдите количество багажей, которое будет сдано в камеры за 24 часа и номер
 ячейки, в которую сдаст багаж последний пассажир. Входные данные
 В первой строке входного файла находится число K – количество ячеек в
 камере хранения, во второй строке файла число N – количество пассажиров,
   сдающих багаж (натуральное число, не превышающее 1000). Каждая из
 следующих N строк содержит два натуральных числа, не превышающих 1440:
   время сдачи багажа и время выдачи багажа.
   Выходные данные
   Программа должна вывести два числа: количество сданных в камеру хранения
 багажей и номер ячейки, в которую примут багаж у последнего пассажира,
   который сможет сдать багаж.
  
Типовой пример организации данных:
2
4
30 1000 
60 100
61 1100   
1010 1440'''
f = open('26_demo.txt', 'r', encoding='utf-8')
k = int(f.readline())  # количество ячеек в камере хранения
n = int(f.readline())  # количество пассажиров
number = 0  # номер ячейки
a = [0] * k  # список времени до которого включительно ячейка занята по каждой ячейке
count = 0  #  кол-во сданных в камеру багажей
pas = []  #  список, в котором будет храниться информация про пассажиров(время сдачи и выдачи багажа)
for line in f:
    t = line.split()
    t = list(map(int, t))
    pas.append(t)  # добавляем в список время сдачи и выдачи багажа
pas.sort()  # сортируем список, чтобы время шло в правильном порядке(если 1-е число элементов списка одинаковое,
#то эта функция сравнивает по второму)
for i in range(n):  # проходимся по каждому багажу
    for j in range(k):  # для данного багажа проходимся по каждой ячейке
        if a[j] < pas[i][0]: # если время выдачи багажа предыдущего пассажира уже закончилось, то
            a[j] = pas[i][1]  # заменяем старое время на новое
            count += 1  # увеличиваем счетчик сданных багажей
            number = j  # сохраняем новый номер ячейки
            break
f.close()
print(count, number + 1)  # прибавляем 1, потому что ячейки пронумерованы начиная с одного, а индексы идут с 0







