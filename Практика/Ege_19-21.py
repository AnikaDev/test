'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди,
первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один камень или увеличить
количество камней в куче в два раза. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре
будем обозначать (10,5). Тогда за один ход можно получить любую из четырёх позиций: (11,5), (20,5), (10,6), (10,10). Для
того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.
Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается
игрок, сделавший последний ход, т.е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.
В начальный момент в первой куче было семь камней, во второй куче— S камней; 1≤S≤69.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при
различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока,
не являющиеся для него безусловно выигрышными, т.е. не являющиеся выигрышными независимо от игры противника.
Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда
такая ситуация возможна'''
# def Check(x, y, h):
#     if h == 3:
#         if x + y >= 77:
#             return True
#         else:
#             return False
#     if x + y >= 77:
#         return False
#     return Check(x + 1, y, h + 1) or Check(x, y + 1, h + 1) or Check(x * 2, y, h + 1) or Check(x, y * 2, h + 1)
#
#
# for s in range(1, 70):
#     if Check(7, s, 1):
#         print(s)
#         break


'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, 
первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один камень или увеличить 
количество камней в куче в два раза. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре
будем обозначать (10,5). Тогда за один ход можно получить любую из четырёх позиций: (11,5), (20,5), (10,6), (10,10). 
Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.
Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается 
игрок, сделавший последний ход, т.е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.
В начальный момент в первой куче было семь камней, во второй куче— S камней; 1≤S≤69.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать
 стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при 
различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, 
не являющиеся для него безусловно выигрышными, т.е. не являющиеся выигрышными независимо от игры противника.
Найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
— Петя не может выиграть за один ход;
— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.
Источник: Демонстрационная версия ЕГЭ−2021 по информатике'''
# def Check(x, y, h):
#     if h == 4:
#         if x + y >= 77:
#             return True
#         else:
#             return False
#     if x + y >= 77:
#         return False
#     if h % 2 == 1:
#         return Check(x + 1, y, h + 1) or Check(x, y + 1, h + 1) or Check(x * 2, y, h + 1) or Check(x, y * 2, h + 1)
#     else:
#         return Check(x + 1, y, h + 1) and Check(x, y + 1, h + 1) and Check(x * 2, y, h + 1) and Check(x, y * 2, h + 1)
#
#
# for s in range(1, 70):
#     if Check(7, s, 1):
#         print(s)

'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди,
первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один камень или увеличить
количество камней в куче в два раза. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре
будем обозначать (10,5). Тогда за один ход можно получить любую из четырёх позиций: (11,5), (20,5), (10,6), (10,10). Для
того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.
Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается 
игрок, сделавший последний ход, т.е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.
В начальный момент в первой куче было семь камней, во второй куче— S камней; 1≤S≤69.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при 
различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, 
не являющиеся для него безусловно выигрышными, т.е. не являющиеся выигрышными независимо от игры противника.
Найдите минимальное значение S, при котором одновременно выполняются два условия:
— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
Источник: Демонстрационная версия ЕГЭ−2021 по информатике'''
# def F(x, y, h):
#     if (h == 3 or h == 5) and x + y >= 77:
#         return True
#     if h == 5 and x + y < 77:
#         return False
#     if x + y >= 77:
#         return False
#     if h % 2 == 0:
#         return F(x + 1, y, h + 1) or F(x, y + 1, h + 1) or F(x * 2, y, h + 1) or F(x, y * 2, h + 1)
#     else:
#         return F(x + 1, y, h + 1) and F(x, y + 1, h + 1) and F(x * 2, y, h + 1) and F(x, y * 2, h + 1)
#
#
# for s in range(1, 70):
#     if F(7, s, 1):
#         print(s)

# def Check(x, y, h):
#     if (h == 3 or h == 5) and x + y >= 77:
#         return True
#     if h == 5 and x + y < 77:
#         return False
#     if x + y >= 77:
#         return False
#     if h % 2 == 0:
#         return Check(x + 1, y, h + 1) or Check(x, y + 1, h + 1) or Check(x * 2, y, h + 1) or Check(x, y * 2, h + 1)
#     else:
#         return Check(x + 1, y, h + 1) and Check(x, y + 1, h + 1) and Check(x * 2, y, h + 1) and Check(x, y * 2, h + 1)
#
#
# for s in range(1, 70):
#     if Check(7, s, 1):
#         print(s)
#         break


'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди,
первый ход делает Петя. За один ход игрок может добавить один камень в одну из куч и два камня в другую или же увеличить
количество камней в любой куче в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы 
будем обозначать (6,8). За один ход из позиции (6,8) можно получить любую из четырёх позиций: (7,10), (8,9), (12,8), 
(6,16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.
Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 47. Победителем считается 
игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 47 или больше камней.
В начальный момент в первой куче было 10 камней, во второй куче— S камней, 1 ≤ S ≤ 36.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать 
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при
различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не 
являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.
Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда
такая ситуация возможна.'''
# def Check(x, y, h):
#     if h == 3:
#         if x + y >= 47:
#             return True
#         else:
#             return False
#     if x + y >= 47:
#         return False
#     return Check(x + 1, y + 2, h + 1) or Check(x + 2, y + 1, h + 1) or Check(x * 2, y, h + 1) or Check(x, y * 2, h + 1)
#
#
# for s in range(1, 37):
#     if Check(10, s, 1):
#         print(s)
#         break

'''Найдите максимальное S, при котором у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
— Петя не может выиграть за один ход;
— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.'''
# def Check(x, y, h):
#     if h == 4:
#         if x + y >= 47:
#             return True
#         else:
#             return False
#     if x + y >= 47:
#         return False
#     if h % 2 == 1:
#         return Check(x + 1, y + 2, h + 1) or Check(x + 2, y + 1, h + 1) or Check(x * 2, y, h + 1) or Check(x, y * 2, h + 1)
#     else:
#         return Check(x + 1, y + 2, h + 1) and Check(x + 2, y + 1, h + 1) and Check(x * 2, y, h + 1) and Check(x, y * 2, h + 1)
#
#
# for s in range(36, 0, - 1):
#     if Check(10, s, 1):
#         print(s)
#         break


'''Найдите минимальное значение S, при котором одновременно выполняются два условия:
— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.'''
# def Check(x, y, h):
#     if (h == 3 or h == 5) and x + y >= 47:
#         return True
#     if h == 5 and x + y < 47:
#         return False
#     if x + y >= 47:
#         return False
#     if h % 2 == 0:
#         return Check(x + 1, y + 2, h + 1) or Check(x + 2, y + 1, h + 1) or Check(x * 2, y, h + 1) or Check(x, y * 2, h + 1)
#     else:
#         return Check(x + 1, y + 2, h + 1) and Check(x + 2, y + 1, h + 1) and Check(x * 2, y, h + 1) and Check(x, y * 2, h + 1)
#
#
# for s in range(1, 37):
#     if Check(10, s, 1):
#         print(s)
#         break

'''(№ 4181) (Е. Джобс) Два игрока, Петя и Ваня, играют в следующую игру. У игроков есть табличка, на которой записана 
пара неотрицательных целых чисел. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может заменить
любое число на сумму обоих чисел. Так, например, если перед ходом игрока была позиция (3, 5), то после его хода будет
позиция (8, 5) или (3, 8). Игра завершается в тот момент, когда сумма чисел пары становится не менее 45. Победителем 
считается игрок, сделавший последний ход. 
Ответьте на следующие вопросы:
Вопрос 1. Известно, что игра началась в позиции (7, S), при этом Ваня одержал победу после неудачного хода Пети. 
Укажите минимальное значение S, при котором это возможно.
Вопрос 2. Найдите значения S, при которых Петя при правильной игре гарантированно выигрывает своим вторым ходом из 
позиции (6, S). В качестве ответа укажите сначала минимальное, затем максимальное значение.
Вопрос 3. Известно, что при игре из позиции (S, S) Ваня гарантированно выигрывает своим вторым ходом при любой игре Пети.
Найдите минимальное значение S, при котором это возможно.'''

# def Check(x, y, h):
#     if h == 5:
#         if x + y >= 45:
#             return True
#         else:
#             return False
#     if x + y >= 45:
#         return False
#     if h % 2 != 1:
#         return Check(x + y, y, h + 1) or Check(x, x + y, h + 1)
#     else:
#         return Check(x + y, y, h + 1) and Check(x, x + y, h + 1)
#
#
# for x in range(1, 44):
#     for s in range(1, 45 - x):
#         if Check(x, s, 1) and x == s:
#             print(s)
#             break

'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый 
ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в
три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 45 камней. У каждого игрока,
чтобы делать ходы, есть неограниченное количество камней.
Игра завершается в тот момент, когда количество камней в куче становится не менее 41.
Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 камень или 
больше.
В начальный момент в куче было S камней; 1 ≤ S ≤ 40.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать 
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при 
различной игре противника.
Найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
— Петя не может выиграть за один ход;
— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.'''
# def F(x, h):
#     if h == 3:
#         if x >= 41:
#             return True
#         else:
#             return False
#     if x >= 41:
#         return False
#     return F(x + 1, h + 1) or F(x + 4, h + 1) or F(x * 3, h + 1)
#
#
# for s in range(1, 40):
#     if F(s, 1):
#         print(s)
#         break


'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый
ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в
три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 45 камней. У каждого игрока,
чтобы делать ходы, есть неограниченное количество камней.
Игра завершается в тот момент, когда количество камней в куче становится не менее 41.
Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 камень
или больше.
В начальный момент в куче было S камней; 1 ≤ S ≤ 40.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при 
различной игре противника.
Найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
— Петя не может выиграть за один ход;
— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.'''
# def F(x, h):
#     if h == 4:
#         if x >= 41:
#             return True
#         else:
#             return False
#     if x >= 41:
#         return False
#     if h % 2 == 1:
#         return F(x + 1, h + 1) or F(x + 4, h + 1) or F(x * 3, h + 1)
#     return F(x + 1, h + 1) and F(x + 4, h + 1) and F(x * 3, h + 1)
#
#
# for s in range(1, 41):
#     if F(s, 1):
#         print(s)


'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый
ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в 
три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 45 камней. У каждого игрока, 
чтобы делать ходы, есть неограниченное количество камней.
Игра завершается в тот момент, когда количество камней в куче становится не менее 41.
Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 камень или 
больше.
В начальный момент в куче было S камней; 1 ≤ S ≤ 40.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать 
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при 
различной игре противника.
Найдите минимальное значение S, при котором одновременно выполняются два условия:
— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.'''
# def F(x, h):
#     if (h == 3 or h == 5) and x >= 41:
#         return True
#     if h == 5 and x < 41:
#         return False
#     if x >= 41:
#         return False
#     if h % 2 == 0:
#         return F(x + 1, h + 1) or F(x + 4, h + 1) or F(x * 3, h + 1)
#     return F(x + 1, h + 1) and F(x + 4, h + 1) and F(x * 3, h + 1)
#
#
# for s in range(1, 41):
#     if F(s, 1):
#         print(s)
#         break

# '''олимп Леон'''
# def F(x, y, step):
#     if x == 1 and y == 1:
#         if step % 2 == 0:
#             return True
#         else:
#             return False
#     if x == 1:
#         return F(x, y - 1, step + 1)
#     if y == 1:
#         return F(x - 1, y, step + 1)
#     if step % 2 != 0:
#         return F(x - 1, y - 1, step + 1) or F(x - 1, y, step + 1) or F(x, y - 1, step + 1)
#     return F(x - 1, y - 1, step + 1) and F(x - 1, y, step + 1) and F(x, y - 1, step + 1)
#
#
# k = 0
# for x in range(1, 8):
#     if F(x, 7, 1):
#         print(x, 7)


'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый
ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три
раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы
делать ходы, есть неограниченное количество камней.
Игра завершается в тот момент, когда количество камней в куче становится не менее 64. Победителем считается игрок,
сделавший последний ход, то есть первым получивший кучу, в которой будет 64 или больше камней. В начальный момент в куче
было S камней, 1 ≤ S ≤ 63.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при
различной игре противника.
Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда
такая ситуация возможна.'''
# def F(x, h):
#     if (h == 3 or h == 5) and x >= 64:
#         return True
#     if h == 5 and x < 64:
#         return False
#     if x >= 64:
#         return False
#     if h % 2 == 0:
#         return F(x + 1, h + 1) or F(x + 2, h + 1) or F(x * 3, h + 1)
#     return F(x + 1, h + 1) and F(x + 2, h + 1) and F(x * 3, h + 1)
#
#
# for x in range(1, 64):
#     if F(x, 1):
#         print(x)
#         break

'''Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, 
первый ход делает Петя. За один ход игрок может убрать из одной из куч один камень или уменьшить количество камней в
куче в два раза (если количество камней в куче нечётно, остаётся на 1 камень меньше, чем убирается). Например, пусть в 
одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно 
получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 4).
Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается
игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.
В начальный момент в первой куче было 10 камней, во второй куче— S камней, S > 10.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать
стратегию игрока— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при
различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не
являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.
Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение S, когда
такая ситуация возможна.'''
# def F(x, y, h):
#     if (h == 3 or h == 5) and x + y <= 20:
#         return True
#     if h == 5 and x + y > 20:
#         return False
#     if x + y <= 20:
#         return False
#     if h % 2 == 0:
#         return F(x - 1, y, h + 1) or F(x, y - 1, h + 1) or F(x // 2, y, h + 1) or F(x, y // 2, h + 1)
#     return F(x - 1, y, h + 1) and F(x, y - 1, h + 1) and F(x // 2, y, h + 1) and F(x, y // 2, h + 1)
#
#
#
# for s in range(100, 20, -1):
#     if F(10, s, 1):
#         print(s)
#         break


'''Для игры, описанной в задании 19, найдите два минимальных значения S, при которых у Пети есть выигрышная стратегия
вторым ходом, при этом он не может гарантировано выиграть за один ход.'''
# def F(a, h):
#     if (h == 2 or h == 4) and a >= 78:
#         return True
#     if h == 4:
#         return False
#     if h < 4 and a >= 78:
#         return False
#     if h % 2 == 1:
#         return F(a + 1, h + 1) or F(a + 4, h + 1) or F(a * 4, h + 1)
#     return F(a + 1, h + 1) and F(a + 4, h + 1) and F(a * 4, h + 1)


# def F2(a, h):  чуть-чуть другое условие(гарантированная победа 1 ходом Пети)
#     if h == 2:
#         if a >= 78:
#             return True
#         else:
#             return False
#     if h % 2 == 1:
#         return F2(a + 1, h + 1) or F2(a + 4, h + 1) or F2(a *4, h + 1)
#     return F2(a + 1, h + 1) and F2(a + 4, h + 1) and F2(a * 4, h + 1)
#
# k = 0
# for s in range(1, 78):
#     if F(s, 1) and not F2(s, 1):
#         print(s)
#         k += 1
#         if k == 2:
#             break

'''Для игры, описанной в задании 19, найдите минимальное значение S, при котором одновременно выполняются два условия:
— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.'''
# def F(a, h):
#     if (h == 3 or h == 5) and a >= 78:
#         return True
#     if h == 5:
#         return False
#     if h < 5 and a >= 78:
#         return False
#     if h % 2 == 0:
#         return F(a + 1, h + 1) or F(a + 4, h + 1) or F(a * 4, h + 1)
#     return F(a + 1, h + 1) and F(a + 4, h + 1) and F(a * 4, h + 1)
#
#
# def F2(a, h):  #  чуть-чуть другое условие(гарантированная победа 1 ходом Вани)
#     if h == 3:
#         if a >= 78:
#             return True
#         else:
#             return False
#     if h < 3 and a >= 78:
#         return False
#     if h % 2 == 0:
#         return F2(a + 1, h + 1) or F2(a + 4, h + 1) or F2(a *4, h + 1)
#     return F2(a + 1, h + 1) and F2(a + 4, h + 1) and F2(a * 4, h + 1)
#
#
# for s in range(1, 78):
#     if F(s, 1) and not F2(s, 1):
#         print(s)
#         break

# for n in range(3, 16):
#     s1 = int('121', n + 1)
#     s2 = int('121', n) + int('13', 16)
#     if s1 == s2:
#         print(n)





























