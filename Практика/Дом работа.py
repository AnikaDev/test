#  1. Заполнить массив из 10 элементов случайными числами от -20 до 20. Найти минимальный элемент, вывести его значение
#  и индекс. Если таких элементов несколько, вывести последний.
# from random import *
# a = [randint(-20, 20) for i in range(10)]
# print(a)
# min1 = a[0]
# ind = 0
# n = len(a)
# for j in range(n):
#     if a[j] <= min1:
#         ind = j
#         min1 = a[j]
# print(ind)
# print(min1)

#  2. Заполнить массив из 10 элементов случайными числами от -20 до 20.
#  Найти максимальный элемент, вывести его значение и индекс.
#  Если таких элементов несколько, вывести последний.
# from random import *
# a = [randint(-20, 20) for i in range(10)]
# max1 = a[0]
# ind = 0
# n = len(a)
# for j in range(1, n):
#     if a[j] >= max1:
#         max1 = a[j]
#         ind = j
# print(a)
# print(ind)
# print(max1)

#  3. В массиве из 10 случайных чисел от -100 до 100 найти максимальное и минимальное значения и поменять местами.
# from random import *
# a = [randint(-100, 100) for i in range(10)]
# max1 = a[0]
# indMin = 0
# min1 = a[0]
# indMax = 0
# for j in range(1, 10):
#     if a[j] >= max1:
#         max1 = a[j]
#         indMax = j
#     if a[j] <= min1:
#         min1 = a[j]
#         indMin = j
# print(max1)
# print(min1)
# print(a)
# a[indMin] = max1
# a[indMax] = min1
# print(a)
# a[indMin], a[indMax] = a[indMax], a[indMin]


'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [185311;185330], числа,
имеющие ровно четыре различных натуральных делителя. Для каждого найденного числа запишите эти четыре делителя в четыре
соседних столбца на экране с новой строки. Делители в строке должны следовать в порядке возрастания.'''
# def Delit(n):
#     a = []
#     for i in range(1, n + 1):
#         if n % i == 0:
#             a.append(i)
#     return a
#
#
# for j in range(185311, 185331):
#     d = Delit(j)
#     if len(d) == 4:
#         print(*d)

'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [312614;312651], числа,
имеющие ровно шесть различных натуральных делителей. Для каждого найденного числа запишите эти шесть делителей в шесть
соседних столбцов на экране с новой строки. Делители в строке должны следовать в порядке возрастания.'''
# def Delit(n):
#     a = []
#     for i in range(1, n + 1):
#         if n % i == 0:
#             a.append(i)
#     return a
#
#
# for j in range(312614, 312652):
#     d = Delit(j)
#     if len(d) == 6:
#         print(*d)


'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632;95700], числа, имеющие 
ровно шесть различных чётных натуральных делителей (при этом количество нечётных делителей может быть любым). 
Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки. 
Делители в строке должны следовать в порядке возрастания.'''
# def Delit(n):
#     a = []
#     for i in range(1, n +1):
#         if n % i == 0 and i % 2 == 0:
#             a.append(i)
#     return a
#
#
# for j in range(95632, 95701):
#     d = Delit(j)
#     if len(d) == 6:
#         print(*d)


'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632;95650], числа, 
имеющие ровно шесть различных нечётных натуральных делителей (при этом количество четных делителей может быть любым). 
Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
 Делители в строке должны следовать в порядке возрастания.'''
# def Delit(n):
#     a = []
#     for i in range(1, n + 1):
#         if n % i == 0 and i % 2 == 1:
#             a.append(i)
#     return a
#
#
# for j in range(95632, 95651):
#     d = Delit(j)
#     if len(d) == 6:
#         print(*d)

# s = '32' * 15 + '42' * 5 + '4' * 5
# while '42' in s or '32' in s:
#     if '42' in s:
#         s = s.replace('42', '51', 1)
#     else:
#         s = s.replace('32', '61', 1)
#
# s = int(s)
# sm = 0
# while s > 0:
#     sm += s % 10
#     s //= 10
# print(sm)

# for i in range(500, 1, -1):
#     n = 1
#     s = i
#     while s > 200:
#       s = s - 15
#       n = n + 3
#     if n == 46:
#         print(i)

'''Определите количество пятизначных чисел, записанных в восьмеричной системе счисления, в записи которых только одна 
цифра 6, при этом никакая нечётная цифра не стоит рядом с цифрой 6.'''
# k = 0
# for i in range(2**12, 2**15):
#     s = oct(i)[2:]
#     if s.count('6') == 1:
#         q = 1
#         p = s.find("6")
#         if p != 0:
#             if int(s[p - 1]) % 2 != 0:
#                 q = 0
#         if p != len(s) - 1:
#             if int(s[p + 1]) % 2 != 1:
#                 q = 0
#         if q:
#             k += 1
# print(k)

# for i in range(999, 99, -1):
#     x = i
#     L = 0
#     M = 0
#     while x > 0:
#         L += 1
#         if x % 2 == 0:
#             M = M + (x % 10) // 2
#         x = x // 10
#     if L == 3 and M == 7:
#         print(i)
#         break

# for i in range(10000, 100001):
#     a = 0
#     b = 0
#     x = i
#     while x > 0:
#         y = x % 10
#         if y > 3:
#             a = a+1
#         if y < 8:
#             b = b + 1
#         x = x // 10
#     if a == 4 and b == 2:
#         print(i)
#         break

# for i in range(10000, 1000001):
#     a = 0
#     b = 10
#     x = i
#     while x > 0:
#         y = x % 10
#         x = x // 10
#         if y > a:
#             a = y
#         if y < b:
#             b = y
#     if a == 6 and b == 3:
#         print(i)
#         break


# a = "QWERTYUIOP"
# n = len(a)
# for i in range(1, len(a)):
#     print(a[i])
#     print(a[i - 1])

# for i in range(len(a) - 1):
#     print(a[i])
#     print(a[i + 1])

'''Пусть M— сумма минимального и максимального натуральных делителей целого числа, не считая единицы и самого числа. 
Если таких делителей у числа нет, то значение M считается равным нулю.
Напишите программу, которая перебирает целые числа, бо́льшие 700000, в порядке возрастания и ищет среди них такие, для 
которых значение M оканчивается на 8. Выведите первые пять найденных чисел и соответствующие им значения M.
Формат вывода: для каждого из пяти таких найденных чисел в отдельной строке сначала выводится само число, затем
— значение М.
Строки выводятся в порядке возрастания найденных чисел.
 Количество строк в таблице для ответа избыточно.'''
# def Find_m(x):
#     for i in range(2, x):
#         if x % i == 0:
#             return i + x // i
#     return 0
#
#
# k = 0
# a = 700000
# while k < 5:
#     d = Find_m(a)
#     if d % 10 == 8:
#         k += 1
#         print(a, d)
#     a += 1


# a = [b**2 for b in range(2, 11, 2)]
# print(a)


'''(№ 5468) (Е. Джобс) В файле 17-344.txt содержится последовательность целых чисел. Элементы последовательности – 
натуральные числа, не превосходящие 100000. Определите количество пар последовательности, в которых сумма чисел четна, 
а разница между числами кратна минимальному числу, кратному 103. Гарантируется, что элемент, кратный 103, в 
последовательности есть. В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар. В 
данной задаче под парой подразумевается два идущих подряд элемента последовательности.'''
# f = open('rt.txt', 'r', encoding='utf-8')
# a = []
# for i in f:
#     a.append(int(i))
# f.close()
# t = 100001
# for i in a:
#     if i % 103 == 0:
#         t = min(t, i)
# n = len(a)
# k = 0
# m = 0
# for i in range(n - 1):
#         if (a[i] + a[i + 1]) % 2 == 0 and abs(a[i] - a[i + 1]) % t == 0:
#             k += 1
#             m = max(m, a[i] + a[i + 1])
# print(k, m)


'''	(№ 4812) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1)Вычисляется сумма S1 всех нечётных цифр десятичной записи числа N. Если нечётных цифр нет, сумма S1 считается равной 0
2) Вычисляется сумма S2 всех цифр десятичной записи числа N, стоящих на позициях с чётными номерами. Позиции нумеруются 
слева направо, начиная с 1. Для однозначных чисел сумма S2 считается равной 0.
3) Вычисляется результат R как модуль разности S1 и S2.
Например, N = Дано число N = 1234. Сумма нечётных цифр S1 = 1 + 3 = 4. Сумма цифр в позициях с чётными номерами 
S2 = 2 + 4 = 6. Результат работы алгоритма R = 6 – 4 = 2.
Укажите наименьшее число, в результате обработки которого по данному алгоритму получится число 29.'''
# for n in range(1, 100000000):
#     a = len(str(n))
#     a1 = '13579'
#     a2 = '24680'
#     s1 = 0
#     s2 = 0
#     for i in range(1, a):
#         if i % 2 == 1:
#             s1 += i
#     for i in range(1, a, 2):
#         s2 += int(i)
#     s3 = abs(s2 - s1)
#     if s3 == 29:
#         print(n)
#         break


'''означает, что последовательность из S команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:
Вперёд 9 Направо 90 
Повтори 2 [Вперёд 3 Направо 90 Вперёд 3 Направо 270] 
Повтори 2 [Вперёд 3 Направо 90] 
Вперёд 9'''
# from turtle import *
# window = Screen()
# speed(200)
# k = 20
# left(90)
# for i in range(2):
#     forward(9 * k)
#     right(90)
# for i in range(2):
#     forward(3*k)
#     right(90)
#     forward(3 * k)
#     right(270)
# for i in range(2):
#     forward(3*k)
#     right(90)
# forward(9*k)
# up()
# for x in range(-2, 10):
#     for y in range(-2, 10):
#         goto(x*k, y*k)
#         dot(1)
# window.exitonclick()


# alf = '01234567'
# k = 0
# for i in alf:
#     for j in alf:
#         for c in alf:
#             for t in alf:
#                 for m in alf:
#                     d = i + j + c + t + m
#                     if d.count('6') == 1 and d[0] != '0' and '16' not in d and '36' not in d and '56' not in d\
#                             and '76' not in d and '61' not in d and '63' not in d and '65' not in d and '67' not in d:
#                         k += 1
# print(k)

'''В лесничестве саженцы сосны высадили параллельными рядами, которые пронумерованы идущими подряд натуральными числами.
Растения в каждом ряду пронумерованы натуральными числами начиная с единицы.
По данным аэрофотосъёмки известно, в каких рядах и на каких местах растения не прижились. Найдите ряд с наибольшим 
номером, в котором есть ровно 13 идущих подряд свободных мест для посадки новых сосен, таких, что непосредственно слева
и справа от них в том же ряду растут сосны. Гарантируется, что есть хотя бы один ряд, удовлетворяющий этому условию. В
ответе запишите два целых числа: наибольший номер ряда и наименьший номер места для посадки из числа найденных в этом 
ряду подходящих последовательностей из 13 свободных мест.
Входные данные.
26.txt
В первой строке входного файла находится число N— количество прижившихся саженцев сосны (натуральное число, не
превышающее 20 000). Каждая из следующих N строк содержит два натуральных числа, не превышающих 100 000: номер ряда и 
номер места в этом ряду, на котором растёт деревце.
Выходные данные
Два целых неотрицательных числа: наибольший номер ряда и наименьший номер места в выбранной последовательности из 13 
мест, подходящих для посадки новых сосен.
Типовой пример организации входных данных
7
40 3
40 7
60 33
50 125
50 129
50 68
50 72
Для приведённого примера, при условии, что необходимо 3 свободных места, ответом является пара чисел: 50; 69.
Типовой пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемых файлов.'''
# f = open('26_32.txt', 'r', encoding='utf-8')
# n = int(f.readline())
# row = []
# places = []
# for line in f:
#     t = line.split()
#     t = list(map(int, t))
#     if t[0] in row:
#         p = row.index(t[0])
#         places[p].append(t[1])
#     else:
#         row.append(t[0])
#         places.append([t[1]])
# f.close()
# n1 = len(row)
# for i in range(n1 - 1):
#     for j in range(n1 - i - 1):
#         if row[j] < row[j + 1]:
#             row[j], row[j + 1] = row[j + 1], row[j]
#             places[j], places[j + 1] = places[j + 1], places[j]
# for i in range(n1):
#     places[i].sort()
# i = 0
# while i < n1:
#     q = 0
#     j = 0
#     n2 = len(places[i])
#     while j < n2 - 1:
#         if places[i][j + 1] - places[i][j] - 1 == 13:
#             print(row[i], places[i][j] + 1)
#             q = 1
#             break
#         else:
#             j += 1
#     if q == 1:
#         break
#     else:
#         i += 1




# def Del(n, m):
#     return n % m == 0
#
#
# for A in range(1, 1000):
#     for x in range(1, 1000):
#         if ((Del(x, 2) <= (not(Del(x, 3))) or (x + A >= 100))) == False:
#             break
#     else:
#         print(A)
#         break

# P = list(range(3, 14))
# Q = list(range(12, 23))
# A = list(range(1, 50))
# for x in range(1, 50):
#     if (((x in A) <= (x in P)) or (x in Q)) == False:
#         A.remove(x)
# print(A)

'''Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт. Строки содержат только
заглавные буквы латинского алфавита (ABC…Z).
Необходимо найти строку, содержащую наименьшее количество букв N (если таких строк несколько, надо взять ту, которая 
находится в файле раньше), и определить, какая буква встречается в этой строке чаще всего. Если таких букв несколько, 
надо взять ту, которая позже стоит в алфавите.
Пример. Исходный файл:
NINA
NABLAB
ANAAA
В этом примере в первой строке две буквы N, во второй и третьей— по одной. Берём вторую строку, т.к. она находится в
файле раньше. В этой строке чаще других встречаются буквы A и B (по два раза), выбираем букву B, т.к. она позже стоит в
алфавите. В ответе для этого примера надо записать B.
Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью
данного алгоритма.'''




'''Операнды арифметического выражения записаны в системе счисления с основанием 14:
1x563_14 + 871x3_14
В записи чисел переменной x обозначена неизвестная цифра из алфавита четырнадцатеричной системы счисления. Определите
наименьшее значение x, при котором значение данного арифметического выражения кратно 24. Для найденного значения x
 вычислите частное от деления значения арифметического выражения на 24 и укажите его в ответе в десятичной системе 
счисления. Основание системы счисления в ответе указывать не нужно.'''
# for x in range(14):
#     t1 = 3 + 6 * 14 + 5 * 14**2 + x * 14** 3 + 14**4
#     t2 = 3 + x * 14+ 1 * 14**2 + 7 * 14**3 + 8 * 14**4
#     s = t1 + t2
#     if s % 24 == 0:
#         print(s // 24)
#         break

'''Числа M и N записаны в системе счисления с основанием 9 соответственно.
M = 842x5_9, N = 8x725_9
В записи чисел переменной x обозначена неизвестная цифра из алфавита девятеричной системы счисления. Определите
наименьшее значение натурального числа A, при котором существует такой x, что M + A кратно N.'''
# for A in range(1, 1000):
#     q = False
#     for x in range(9):
#         m = 5 + x * 9 + 2 * 81 + 4 * 9**3 + 8 * 9**4
#         n = 5 + 2 * 9 + 7 * 81 + x * 9**3 + 8 * 9**4
#         s = m + A
#         if s % n == 0:
#             print(A)
#             q = True
#             break
#     if q:
#         break



'''
Операнды арифметического выражения записаны в системах счисления с основаниями 9 и 11:
88x4y_9 + 7x44y_11
В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры. Определите 
значения x и y, при которых значение данного арифметического выражения будет наименьшим и кратно 61. Для найденных 
значений x и y вычислите частное от деления значения арифметического выражения на 61 и укажите его в ответе в десятичной
системе счисления. Основание системы счисления в ответе указывать не нужно.'''
# for x in range(9):
#     q = 0
#     for y in range(9):
#         s1 = y + 4 * 9 + x * 81 + 8 * 9**3 + 8 * 9**4
#         s2 = y + 4 * 11 + 4 * 121 + x * 11**3 + 7 * 11**4
#         s = s1 + s2
#         if s % 61 == 0:
#             print(s//61)
#             q = True
#             break
#     if q:
#         break

'''Операнды арифметического выражения записаны в системах счисления с основаниями 13 и 18:
8x78y13 + 79xy718
В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры. Определите 
значения x и y, при которых значение данного арифметического выражения будет наименьшим и кратно 9. Для найденных
значений x и y вычислите частное от деления значения арифметического выражения на 9 и укажите его в ответе в десятичной
системе счисления. Основание системы счисления в ответе указывать не нужно.'''
# for x in range(13):
#     q = 0
#     for y in range(13):
#         s1 = y + 8 * 13 + 7 * 169 + x * 13**3 + 8 * 13**4
#         s2 = 7 + y * 18 + x * 18**2 + 9 * 18**3 + 7 * 18**4
#         s = s1 + s2
#         if s % 9 == 0:
#             print(s // 9)
#             q = 1
#             break
#     if q:
#         break


'''перанды арифметического выражения записаны в системе счисления с основаниями 15 и 13:
4Cx4_15 + x62A_13
В записи чисел переменной x обозначена неизвестная цифра из алфавита десятичной системы счисления. Определите наименьшее
значение x, при котором значение данного арифметического выражения кратно 121. Для найденного значения x вычислите 
частное от деления значения арифметического выражения на 121 и укажите его в ответе в десятичной системе счисления.
Основание системы счисления в ответе указывать не нужно.'''
# for x in range(13):
#     s1 = 4 + x * 15 + 12 * 15**2 + 4 * 15**3
#     s2 = 10 + 2 * 13 + 6 * 169 + x * 13**3
#     s = s1 + s2
#     if s % 121 == 0:
#         print(s//121)


'''(№ 5514) (И. Степанов) Операнды арифметического выражения записаны в системе счисления с основанием 44. 
1x23_44 + 32x1_44
В записи чисел переменной x обозначена неизвестная цифра из алфавита 44-ричной системы счисления. Определите наибольшее
значение x, при котором значение данного арифметического выражения кратно 42. Для найденного значения x вычислите
частное от деления значения арифметического выражения на 42 и укажите его в ответе в десятичной системе счисления.'''
# for x in range(43, -1, -1):
#     s1 = 3 + 2 * 44 + x * 44**2 + 44**3
#     s2 = 1 + x * 44 + 2 * 44**2 + 3 * 44**3
#     s = s1 + s2
#     if s % 42 == 0:
#         print(s//42)
#         break
'''(№ 5442) (А. Кабанов) Для хранения произвольного растрового изображения размером 640 на 480 пикселей отведено 600
Кбайт памяти без учёта размера заголовка файла. При кодировании каждого пикселя используется 64 уровня прозрачности, а 
также одинаковое количество бит для указания его цвета. Коды пикселей записываются в файл один за другим без промежутков
Какое максимальное количество цветов (без учета степени прозрачности) можно использовать в изображении?'''
# R * I <= V
# print(600*2**13/640/480) #16=I
# 2**I1 >= 64 => I1 = 6
# I2 = I - I1 = 10
# 2 ** I2 = K => 1024

# f = open('cozd.txt', 'r', encoding='utf-8')
# a = []
# for line in f:
#     t = line.split(';')
#     if t[2][-1] == '\n':
#         t[2] = t[2][:-1]
#     a.append(t[2])
# f.close()
# b = set(a)
# b = sorted(b)
# f = open('result.txt', 'w', encoding='utf-8')
# for y in b:
#     s = f"В {y} году было продано {a.count(y)} палочек\n"
#     f.write(s)
# f.close()

# f = open('sozd.txt', 'r', encoding='utf-8')
# country = input()
# a = []
# for line in f:
#     t = line.split(', ')
#     if t[1][-1] == '\n':
#         t[1] = t[1][:-1]
#     if t[1] == country:
#         a.append(t[0])
# f.close()
# n = len(a)
# for i in range(n - 1):
#     for j in range(n - 1 - i):
#         k1 = a[j].find(' место')
#         k2 = a[j + 1].find(' место')
#         k1 = a[j][:k1]
#         k1 = int(k1)
#         k2 = a[j + 1][:k2]
#         k2 = int(k2)
#         if k1 > k2:
#             a[j], a[j + 1] = a[j + 1], a[j]
# print(a)
# f = open('result.txt', 'w', encoding='utf-8')
# f.write(country + '\n')
# for x in a:
#     f.write(x + '\n')
# f.close()

'''Имеется набор данных, состоящий из пар положительных целых чисел. Необходимо выбрать из каждой пары ровно одно число
так, чтобы сумма всех выбранных чисел не делилась на 3 и при этом была максимально возможной. Гарантируется, что искомую
сумму получить можно. Программа должна напечатать одно число— максимально возможную сумму, соответствующую условиям 
задачи.
Входные данные.
Файл A
Файл B
Даны два входных файла (файл A и файл B), каждый из которых содержит в первой строке количество пар N (1≤N≤100000).
Каждая из следующих N строк содержит два натуральных числа, не превышающих 10 000.
Пример организации исходных данных во входном файле:
6
1 3
5 12
6 9
5 4
3 3
1 1
Для указанных входных данных значением искомой суммы должно быть число 32.
В ответе укажите два числа: сначала значение искомой суммы для файла А, затем для файла B.
 
Предупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных
вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.'''

# def Del(n, m):
#     return n % m == 0
#
#
# for A in range(1000, 1, -1):
#     for x in range(1, 1000):
#         if ((Del(x, A) or not(Del(x, 6)) or not(Del(x, 3))) == False:
#             break
#     else:
#         print(A)
#         break


# for n in range(4, 1000):
#     a = []
#     s = '3' + '5' * n
#     while '25' in s or '355' in s or '555' in s:
#         if '25' in s:
#             s = s.replace('25', '3', 1)
#         if '355' in s:
#             s = s.replace('355', '52', 1)
#         if '555' in s:
#             s = s.replace('555', '23', 1)
#     if len(s) < 10:
#         s = s + '0' * (10 - len(s))
#     m = int(s[0]) + int(s[1]) + int(s[2]) + int(s[3]) + int(s[4]) + int(s[5]) + int(s[6]) + int(s[7]) + int(s[8]) + int(s[9])
#     if m == 27:
#         print(n)
#         break

'''Михаил составляет 5-буквенные коды. В кодах разрешается использовать только буквы А, Б, В, Г, Д, при этом код не 
может начинаться с гласной и не может содержать двух одинаковых букв подряд. Сколько различных кодов может составить 
Михаил?'''
# from itertools import *
# def F(n):
#     for y in range(1, len(n) - 1):
#         if n[y] != n[y + 1]:
#             return True
#
#
# alf = 'abvgd'
# k = 0
# for x in product(alf, repeat=5):
#     a = ''.join(x)
#     j = F(a)
#     if j and (a[0] != 'a'):
#         k += 1
# print(k)
# def Prost(n):
#     for i in range(2, n):
#         if n % i == 0:
#             return False
#     return True
#
#
#
# for n in range(100):
#     m = 0
#     s = '>' + 39 * '0' + n * '1' + 39 * '2'
#     while '>1' in s or '>2' in s or '>0' in s:
#         if '>1' in s:
#             s = s.replace('>1', '22>', 1)
#         if '>2' in s:
#             s = s.replace('>2', '2>', 1)
#         if '>0' in s:
#             s = s.replace('>0', '1>', 1)
#     for i in range(len(s)):
#         if s[i] != '>':
#             m += int(s[i])
#     if Prost(m):
#         print(n)
#         break













