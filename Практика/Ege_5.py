'''На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1.Строится двоичная запись числа N.
2.К этой записи дописываются справа ещё два разряда по следующему правилу:
а)складываются все цифры двоичной записи числа N, и остаток от деления суммы на 2 дописывается в конец числа (справа).
Например, запись 11100 преобразуется в запись 111001;
б)над этой записью производятся те же действия— справа дописывается остаток от деления суммы цифр на 2.
Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью
 результирующего числа R.
Укажите такое наименьшее число N, для которого результат работы алгоритма больше числа 77. В ответе это число запишите
 в десятичной системе счисления.'''
# for n in range(1, 1000):
#     s = bin(n)[2:]
#     s += str(s.count('1') % 2)
#     s += str(s.count('1') % 2)
#     r = int(s, 2)
#     if r > 77:
#         print(n)
#         break

'''На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1.Строится двоичная запись числа N.
2.К этой записи дописываются справа ещё два разряда по следующему правилу: складываются все цифры двоичной записи, если
а)сумма нечетная к числу дописывается 11,
б)сумма четная, дописывается 00.
Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью 
искомого числа R. Укажите такое наименьшее число R, которое превышает 114 и может являться результатом работы алгоритма.
 В ответе это число запишите в десятичной системе счисления.'''
# for R in range(115, 1000):
#     r = bin(R)[2:]
#     if (r[:-2].count('1') % 2 == 1 and r[-2:] == '11') or (r[:-2].count('1') % 2 == 0 and r[-2:] == '00'):
#         print(R)
#         break

'''На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число следующим образом.
1.Строится двоичная запись числа N.
2.К этой записи дописываются справа ещё два разряда по следующему правилу: если N чётное, в конец числа (справа) 
дописываются два нуля, в противном случае справа дописываются две единицы. Например, двоичная запись 1001 числа 9 будет
преобразована в 100111.
Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью 
числа – результата работы данного алгоритма.
Укажите минимальное число N, для которого результат работы алгоритма будет больше 115. В ответе это число запишите в 
десятичной системе счисления.'''
# for n in range(1, 1000):
#     s = bin(n)[2:]
#     if n % 2 == 0:
#         s += '00'
#     else:
#         s += '11'
#     r = int(s, 2)
#     if r > 115:
#         print(n)
#         break

'''Автомат обрабатывает натуральное число N по следующему алгоритму:
1.Строится двоичная запись числа N.
2.В конец записи (справа) добавляется (дублируется) последняя цифра.
3.Складываются все цифры полученной двоичной записи. В конец записи (справа) дописывается остаток от деления суммы на 2.
4.Результат переводится в десятичную систему и выводится на экран.
Пример. Дано число N = 13. Алгоритм работает следующим образом:
1.Двоичная запись числа N: 1101.
2.Дублируется последняя цифра, новая запись 11011.
3.Сумма цифр полученной записи 4, остаток от деления на 2 равен 0, новая запись 110110.
4.На экран выводится число 54.
Какое наименьшее число, большее 105, может появиться на экране в результате работы автомата?'''
# for R in range(106, 1000):
#     s = bin(R)[2:]
#     if s[:-1].count('1') % 2 == int(s[-1]) and s[-3] == s[-2]:
#         print(R)
#         break

'''На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1)Строится двоичная запись числа N.
2)К этой записи дописываются справа ещё два разряда по следующему правилу:
а) если N чётное, в конец числа (справа) дописывается сначала ноль, а затем единица.
б)если N нечётное, справа дописывается сначала единица, а затем ноль.
Например, двоичная запись 100 числа 4 будет преобразована в 10001, а двоичная запись 111 числа 7 будет
преобразована в 11110.
Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью
 числа R— результата работы данного алгоритма.
Укажите минимальное число R, которое больше 102 и может являться результатом работы данного алгоритма. В ответе это
 число запишите в десятичной системе счисления.'''
# for R in range(103, 1000):
#     r = bin(R)[2:]
#     if (r[-2].count('1') % 2 == 0 and r[-2:] == '01') or (r[-2].count('1') % 2 == 1 and r[-2:] == '10'):
#         print(R)
#         break

'''Автомат обрабатывает натуральное число N > 1по следующему алгоритму.
1.Строится двоичная запись числа N.
2.Последняя цифра двоичной записи удаляется.
3.Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если чётным— 01.
4.Результат переводится в десятичную систему и выводится на экран.
Пример. Дано число N = 13. Алгоритм работает следующим образом.
1.Двоичная запись числа N: 1101.
2.Удаляется последняя цифра, новая запись: 110.
3.Исходное число нечётно, дописываются цифры 10, новая запись: 11010.
4.На экран выводится число 26.
Какое число нужно ввести в автомат, чтобы в результате получилось 2018?'''
# for n in range(1, 2000):
#     s = bin(n)[2:]
#     t = s[:-1]
#     if n % 2 == 0:
#         t += '01'
#     else:
#         t += '10'
#     r = int(t, 2)
#     if r == 2018:
#         print(n)
#         break

'''Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
1.Строится восьмибитная двоичная запись числа N.
2.Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
3.Полученное число переводится в десятичную запись.
4.Из нового числа вычитается исходное, полученная разность выводится на экран.
Пример. Дано число N = 13. Алгоритм работает следующим образом.
1.Восьмибитная двоичная запись числа N: 00001101.
2.Все цифры заменяются на противоположные, новая запись 11110010.
3.Десятичное значение полученного числа 242.
4.На экран выводится число 242 − 13 = 229.
Какое число нужно ввести в автомат, чтобы в результате получилось 133?'''
# for n in range(1, 3000):
#     r = bin(n)[2:]
#     h = len(r)
#     w = 8 - h
#     m = '0' * w
#     if h < 8:
#         r = m + r
#     r = r.replace('1', '5')
#     r = r.replace('0', '1')
#     r = r.replace('5', '0')
#     d = int(r, 2)
#     if d - n == 133:
#         print(n)
#         break
'''Автомат обрабатывает натуральное число N по следующему алгоритму:
1.Строится двоичная запись числа N.
2.Удаляется первая слева единица и все следующие непосредственно за ней нули. Если после этого в числе не остаётся цифр,
 результат этого действия считается равным нулю.
3.Полученное число переводится в десятичную запись.
4.Новое число вычитается из исходного, полученная разность выводится на экран.
Пример. Дано число N = 11. Алгоритм работает следующим образом.
1.Двоичная запись числа N: 1011.
2.Удаляется первая единица и следующий за ней ноль: 11.
3.Десятичное значение полученного числа 3.
4.На экран выводится число 11 – 3 = 8.
 
Сколько разных значений будет показано на экране автомата при последовательном 
вводе всех натуральных чисел от 10 до 1000?'''

# a = []
# for n in range(10, 1001):
#     r = bin(n)[2:]
#     s = r[1:]
#     k = s.lstrip('0')
#     if k == '':
#         k = '0'
#     d = int(k, 2)
#     f = n - d
#     a.append(f)
# h = set(a)
# print(len(h))

'''Автомат обрабатывает натуральное число N по следующему алгоритму:
1.Строится троичная запись числа N.
2.В конец записи (справа) дописывается остаток от деления числа N на 3.
3.Результат переводится из троичной системы в десятичную и выводится на экран.
Пример. Дано число N=11. Алгоритм работает следующим образом:
1.Троичная запись числа N: 102.
2.Остаток от деления 11на 3 равен 2, новая запись 1022.
3.На экран выводится число 35.
Какое наименьшее четырёхзначное число может появиться на экране в результате работы автомата?
Раздел кодификатора ФИПИ: 1.6.3 Построение алгоритмов и практические вычисления'''
# def Trans_3(x):
#     s = ''
#     while x > 0:
#         s += str(x % 3)
#         x //= 3
#     return s[::-1]
#
#
# for i in range(1000, 10000):
#     r = Trans_3(i)
#     if int(r[:-1], 3) % 3 == int(r[-1]):
#         print(i)
#         break

'''Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
1.Строится двоичная запись числа N.
2.Вычисляется количество единиц, стоящих на чётных местах в двоичной записи числа N без ведущих нулей, и количество 
нулей, стоящих на нечётных местах. Места отсчитываются слева направо (от старших разрядов к младшим, начиная с единицы).
3.Результатом работы алгоритма становится модуль разности полученных двух чисел.
Пример. Дано число N=39. Алгоритм работает следующим образом:
1.Строится двоичная запись: 3910=1001112.
2.Выделяем единицы на чётных и нули на нечётных местах: 100111. На чётных местах стоят две единицы, на нечётных— 
один ноль.
3.Модуль разности равен 1.
Результат работы алгоритма R=1.
При каком наименьшем N в результате работы алгоритма получится R=5?'''
# for n in range(2, 10000):
#     r = bin(n)[2:]
#     k1 = r[1::2].count('1')
#     k2 = r[0::2].count('0')
#     d = abs(k1 - k2)
#     if d == 5:
#         print(n)
#         break

'''На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1.Строится двоичная запись числа N.
2.К этой записи дописываются справа ещё два разряда по следующему правилу:
а)если сумма цифр в двоичной записи числа чётная, то к этой записи справа дописывается 0, а затем два левых разряда 
заменяются на 10;
б)если сумма цифр в двоичной записи числа нечётная, то к этой записи справа дописывается 1, а затем два левых
 разряда заменяются на 11.
Полученная таким образом запись является двоичной записью искомого числа R.
Например, для исходного числа 6_10=110_2 результатом является число 10002=810, а для исходного числа 410=1002 результатом 
является число 11012=1310.
Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число R, большее 40. В ответе
 запишите это число в десятичной системе счисления.'''
# for n in range(1, 1000):
#     r = bin(n)[2:]
#     if n.count('1') % 2 == 0:
#         r = r + '0'
#         r = '10' + r[2:]
#     else:
#         r = r + '1'
#         r = '11' + r[2:]
#     R = int(r, 2)
#     if R > 40:
#         print(n)

'''Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
1.Строится восьмибитная двоичная запись числа N.
2.Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
3.Полученное число переводится в десятичную запись.
4.Из нового числа вычитается исходное, полученная разность выводится на экран.
Пример. Дано число N = 13. Алгоритм работает следующим образом.
1.Восьмибитная двоичная запись числа N: 00001101.
2.Все цифры заменяются на противоположные, новая запись 11110010.
3.Десятичное значение полученного числа 242.
4.На экран выводится число 242 − 13 = 229
Какое число нужно ввести в автомат, чтобы в результате получилось 133?'''
# for n in range(256):
#     r = bin(n)[2:]
#     g = 8 - len(r)
#     if len(r) < 8:
#         r = g * '0' + r
#     r = r.replace('1', '*')
#     r = r.replace('0', '1')
#     r = r.replace('*', '0')
#     f = int(r, 2)
#     u = f - n
#     if u == 133:
#         print(n)
#         break
'''Автомат обрабатывает натуральное число N (128 ≤ N ≤ 255) по следующему алгоритму:
1.Строится восьмибитная двоичная запись числа N.
2.Все цифры двоичной записи заменяются на противоположные (0,на 1, 1 на 0).
3.Полученное число переводится в десятичную запись.
4.Из исходного числа вычитается полученное, разность выводится на экран.
Пример. Дано число N = 131. Алгоритм работает следующим образом:
1.Восьмибитная двоичная запись числа N: 10000011.
2.Все цифры заменяются на противоположные, новая запись: 01111100.
3.Десятичное значение полученного числа: 124.
4.На экран выводится число: 131 – 124 = 7.
Какое число нужно ввести в автомат, чтобы в результате получилось 185?'''
# for n in range(128, 256):
#     r = bin(n)[2:]
#     g = 8 - len(r)
#     if len(r) < 8:
#         r = '0' * g + r
#     r = r.replace('1', '3')
#     r = r.replace('0', '1')
#     r = r.replace('3', '0')
#     f = int(r, 2)
#     if n - f == 185:
#         print(n)
#         break
'''Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
1.Строится двоичная запись числа N.
2.Подсчитывается количество нулей и единиц в полученной записи. Если их количество одинаково, в конец записи 
добавляется её последняя цифра. В противном случае в конец записи добавляется та цифра, которая встречается реже.
3.Шаг 2 повторяется ещё два раза
4.Результат переводится в десятичную систему.
Пример. Дано число N=19. Алгоритм работает следующим образом:
1.Двоичная запись числа N: 10011.
2.В полученной записи нулей меньше, чем единиц, в конец записи добавляется 0. Новая запись: 100110.
3.В текущей записи нулей и единиц поровну, в конец записывается последняя цифра, это 0. Получается 1001100. В этой 
записи единиц меньше, в конец добавляется 1: 10011001.
4.Результат работы алгоритма R=153.
При каком наименьшем числе N>99в результате работы алгоритма получится число, кратное 4?'''
# for n in range(100, 1001):
#     r = bin(n)[2:]
#     for i in range(3):
#         if r.count('1') == r.count('0'):
#             r = r + r[-1]
#         else:
#             if r.count('1') > r.count('0'):
#                 r = r + '0'
#             else:
#                 r = r + '1'
#     d = int(r, 2)
#     if d % 4 == 0:
#         print(n)
#         break

'''(№ 5721) (А. Игнатюк) Исполнитель «Аполлон» получает на вход четырёхзначное число N и строит новое число R по 
следующим правилам:
1) Если число N начинается с чётной цифры, то число R вычисляется как сумма первой и третьей цифр и модуля разности 
второй и четвёртой цифр.
2) Если число N начинается с нечётной цифры, то цифры числа N располагают в неубывающем порядке. Число R вычисляется 
как сумма цифр в двоичной записи полученного числа.Сколько существует чисел N, для которых результат работы алгоритма 
будет более 20?'''
# k = 0
# for N in range(1000, 10000):
#     s = str(N)
#     if int(s[0]) % 2 == 0:
#         R = int(s[0]) + int(s[2]) + abs(int(s[1]) - int(s[3]))
#     else:
#         a = sorted(s)
#         s = ''
#         for i in a:
#             s += i
#         r = bin(int(s))[2:]
#         R = r.count('1')
#     if R > 20:
#         k += 1
# print(k)

'''(А. Игнатюк) Ася составляет семибуквенные слова из букв слова САМОКАТ, причем известно, что буквы в словах могут
повторяться любое количество раз или же не встречаться вовсе. Помогите Асе найти количество слов, в котором один раз 
встречается комбинация САМ, справа и слева от которой находятся одинаковые гласные буквы'''
# import itertools
# alf = "САМОКТ"
# r1 = itertools.product(alf, repeat=7)
# r2 = []
# for w in r1:
#     r2.append(list(w))
# k = 0
# for word in r2:
#     for i in range(1, 3):
#         if word[i] == "С" and word[i + 1] == "А" and word[i + 2] == "М" and word[i - 1] in "АО" \
#                 and word[i + 3] in "АО" and word[i - 1] == word[i + 3]:
#             s = ''
#             for w in word:
#                 s += w
#             if s.count("САМ") == 1:
#                 k += 1
# print(k)

'''Дана программа для исполнителя Редактор: 
НАЧАЛО
ПОКА нашлось(>1) ИЛИ нашлось(>2) ИЛИ нашлось(>3)
  ЕСЛИ нашлось(>1) 
    ТО заменить(>1, 22>) = 4
  КОНЕЦ ЕСЛИ
  ЕСЛИ нашлось(>2)
    ТО заменить(>2, 2>) = 2
  КОНЕЦ ЕСЛИ
  ЕСЛИ нашлось(>3) 
    ТО заменить(>3, 1>) = 1
  КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
На вход программы поступает строка, начинающаяся с символа «>», а затем содержащая 17 цифр 1, 34 цифры 2 и m цифр 3, 
расположенных в произвольном порядке. Определите минимальное значение m, при котором сумма числовых значений цифр строки,
получившейся в результате выполнения программы, будет иметь ровно 3 различных натуральных делителя, не включая единицы 
и самого значения суммы.'''
# def Delit(x):
#     k = 0
#     for i in range(2, x):
#         if x % i == 0:
#             k += 1
#     return k
#
#
# for m in range(0, 1000):
#     x = 17*4 + 34*2 + m
#     d = Delit(x)
#     if d == 3:
#         print(m)
#         break

'''(№ 6029) (И. Митин) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим 
образом:
1. Каждая цифра числа N записывается с помощью 4-битного двоичного кода. В конец кода каждой цифры добавляется бит 
чётности так, чтобы количество единиц в расширенной записи стало чётным.
2. Далее к этой записи справа дописывается 0, а два левых разряда заменяются на 1.
3. Полученная таким образом запись является двоичной записью искомого числа R. 
Например, для исходного числа 13 двоичные коды цифр: 1 = 00012, 3 = 00112. С добавленными битами чётности: 00011 и
00110, результат шага 1: 0001100110. Заменяем два левых разряда на 1 и добавляем справа 0: 10110011002 = 716. 
Укажите минимальное N, после обработки которого с помощью этого алгоритма получится 674890.'''
# for N in range(1, 6000):
#     n = ''
#     x = N
#     while x > 0:
#         s = bin(x % 10)[2:]
#         s = '0' * (4 - len(s)) + s
#         if s.count('1') % 2 == 0:
#             s += '0'
#         else:
#             s += '1'
#         n = s + n
#         x //= 10
#     n = '1' + n[2:] + '0'
#     R = int(n, 2)
#     if R == 674890:
#         print(N)
#         break

'''(№ 6096) (Д. Статный) В файле 17-362.txt содержится последовательность целых чисел, записанных в позиционных системах
исчисления с основаниями от 2 до 36 (для систем с основаниями, большими 10, в качестве цифр используются буквы A, B, C,
..., Z). Будем считать, что основание системы счисления на единицу больше, чем максимальная цифра числа (например, для 
числа 1A42 основание системы счисления равно A + 1 = 10 + 1 = 11). Парой назовём два подряд идущих элемента
последовательности. Определите количество пар, в которых основания систем счисления, в которых записаны числа,
отличаются не более чем на 2. В ответ запишите сначала количество таких пар, а затем — максимальную сумму элементов 
пары (в десятичной системе счисления).'''
# def F(x):
#     alf = '0123456789abcdefghijklmnopqrstuvwxyz'
#     alf = alf.upper()
#     m = ''
#     for i in alf:
#         if i in x:
#             m = i
#     p = alf.find(m)
#     if p == 0 or p == 1:
#         return 2
#     else:
#         return p + 1
#
#
# k = 0
# m = 0
# f = open('17_polak.txt', 'r', encoding='utf-8')
# a = []
# for line in f:
#     if line[-1] == '\n':
#         t = line[:-1]
#     else:
#         t = line
#     a.append(t)
# n = len(a)
# for i in range(n - 1):
#     r1 = F(a[i])
#     r2 = F(a[i + 1])
#     if abs(r1 - r2) <= 2:
#         k += 1
#         m = max(m, int(a[i], r1) + int(a[i + 1], r2))
print(k, m)




















